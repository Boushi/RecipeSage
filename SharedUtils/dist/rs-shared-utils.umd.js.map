{"version":3,"file":"rs-shared-utils.umd.js","sources":["../node_modules/fraction.js/fraction.js","../node_modules/unitz-ts/lib/Plurality.js","../node_modules/unitz-ts/lib/System.js","../node_modules/unitz-ts/lib/Functions.js","../node_modules/unitz-ts/lib/Group.js","../node_modules/unitz-ts/lib/Class.js","../node_modules/unitz-ts/lib/Output.js","../node_modules/unitz-ts/lib/Transform.js","../node_modules/unitz-ts/lib/Sort.js","../node_modules/unitz-ts/lib/Core.js","../node_modules/unitz-ts/lib/Value.js","../node_modules/unitz-ts/lib/Range.js","../node_modules/unitz-ts/lib/Base.js","../node_modules/unitz-ts/lib/Translations.js","../node_modules/unitz-ts/lib/Rates.js","../node_modules/unitz-ts/lib/Parse.js","../node_modules/unitz-ts/lib/classes/Angle.js","../node_modules/unitz-ts/lib/classes/Area.js","../node_modules/unitz-ts/lib/classes/Digital.js","../node_modules/unitz-ts/lib/classes/Length.js","../node_modules/unitz-ts/lib/classes/Temperature.js","../node_modules/unitz-ts/lib/classes/Time.js","../node_modules/unitz-ts/lib/classes/Volume.js","../node_modules/unitz-ts/lib/classes/Weight.js","../node_modules/unitz-ts/lib/Classes.js","../src/units.js","../src/index.js"],"sourcesContent":["/**\n * @license Fraction.js v4.0.12 09/09/2015\n * http://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n(function(root) {\n\n  \"use strict\";\n\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n  var MAX_CYCLE_LEN = 2000;\n\n  // Parsed data to avoid calling \"new\" all the time\n  var P = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1\n  };\n\n  function createError(name) {\n\n    function errorConstructor() {\n      var temp = Error.apply(this, arguments);\n      temp['name'] = this['name'] = name;\n      this['stack'] = temp['stack'];\n      this['message'] = temp['message'];\n    }\n\n    /**\n     * Error constructor\n     *\n     * @constructor\n     */\n    function IntermediateInheritor() {}\n    IntermediateInheritor.prototype = Error.prototype;\n    errorConstructor.prototype = new IntermediateInheritor();\n\n    return errorConstructor;\n  }\n\n  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');\n  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');\n\n  function assign(n, s) {\n\n    if (isNaN(n = parseInt(n, 10))) {\n      throwInvalidParam();\n    }\n    return n * s;\n  }\n\n  function throwInvalidParam() {\n    throw new InvalidParameter();\n  }\n\n  var parse = function(p1, p2) {\n\n    var n = 0, d = 1, s = 1;\n    var v = 0, w = 0, x = 0, y = 1, z = 1;\n\n    var A = 0, B = 1;\n    var C = 1, D = 1;\n\n    var N = 10000000;\n    var M;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = p1;\n      d = p2;\n      s = n * d;\n    } else\n      switch (typeof p1) {\n\n        case \"object\":\n        {\n          if (\"d\" in p1 && \"n\" in p1) {\n            n = p1[\"n\"];\n            d = p1[\"d\"];\n            if (\"s\" in p1)\n              n *= p1[\"s\"];\n          } else if (0 in p1) {\n            n = p1[0];\n            if (1 in p1)\n              d = p1[1];\n          } else {\n            throwInvalidParam();\n          }\n          s = n * d;\n          break;\n        }\n        case \"number\":\n        {\n          if (p1 < 0) {\n            s = p1;\n            p1 = -p1;\n          }\n\n          if (p1 % 1 === 0) {\n            n = p1;\n          } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n            if (p1 >= 1) {\n              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n              p1 /= z;\n            }\n\n            // Using Farey Sequences\n            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n            while (B <= N && D <= N) {\n              M = (A + C) / (B + D);\n\n              if (p1 === M) {\n                if (B + D <= N) {\n                  n = A + C;\n                  d = B + D;\n                } else if (D > B) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n                break;\n\n              } else {\n\n                if (p1 > M) {\n                  A += C;\n                  B += D;\n                } else {\n                  C += A;\n                  D += B;\n                }\n\n                if (B > N) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n              }\n            }\n            n *= z;\n          } else if (isNaN(p1) || isNaN(p2)) {\n            d = n = NaN;\n          }\n          break;\n        }\n        case \"string\":\n        {\n          B = p1.match(/\\d+|./g);\n\n          if (B === null)\n            throwInvalidParam();\n\n          if (B[A] === '-') {// Check for minus sign at the beginning\n            s = -1;\n            A++;\n          } else if (B[A] === '+') {// Check for plus sign at the beginning\n            A++;\n          }\n\n          if (B.length === A + 1) { // Check if it's just a simple number \"1234\"\n            w = assign(B[A++], s);\n          } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\n\n            if (B[A] !== '.') { // Handle 0.5 and .5\n              v = assign(B[A++], s);\n            }\n            A++;\n\n            // Check for decimal places\n            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n              w = assign(B[A], s);\n              y = Math.pow(10, B[A].length);\n              A++;\n            }\n\n            // Check for repeating places\n            if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n              x = assign(B[A + 1], s);\n              z = Math.pow(10, B[A + 1].length) - 1;\n              A += 3;\n            }\n\n          } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n            w = assign(B[A], s);\n            y = assign(B[A + 2], 1);\n            A += 3;\n          } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n            v = assign(B[A], s);\n            w = assign(B[A + 2], s);\n            y = assign(B[A + 4], 1);\n            A += 5;\n          }\n\n          if (B.length <= A) { // Check for more tokens on the stack\n            d = y * z;\n            s = /* void */\n                    n = x + d * v + z * w;\n            break;\n          }\n\n          /* Fall through on error */\n        }\n        default:\n          throwInvalidParam();\n      }\n\n    if (d === 0) {\n      throw new DivisionByZero();\n    }\n\n    P[\"s\"] = s < 0 ? -1 : 1;\n    P[\"n\"] = Math.abs(n);\n    P[\"d\"] = Math.abs(d);\n  };\n\n  function modpow(b, e, m) {\n\n    var r = 1;\n    for (; e > 0; b = (b * b) % m, e >>= 1) {\n\n      if (e & 1) {\n        r = (r * b) % m;\n      }\n    }\n    return r;\n  }\n\n\n  function cycleLen(n, d) {\n\n    for (; d % 2 === 0;\n            d /= 2) {\n    }\n\n    for (; d % 5 === 0;\n            d /= 5) {\n    }\n\n    if (d === 1) // Catch non-cyclic numbers\n      return 0;\n\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    var rem = 10 % d;\n    var t = 1;\n\n    for (; rem !== 1; t++) {\n      rem = rem * 10 % d;\n\n      if (t > MAX_CYCLE_LEN)\n        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n    return t;\n  }\n\n\n     function cycleStart(n, d, len) {\n\n    var rem1 = 1;\n    var rem2 = modpow(10, len, d);\n\n    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n\n      if (rem1 === rem2)\n        return t;\n\n      rem1 = rem1 * 10 % d;\n      rem2 = rem2 * 10 % d;\n    }\n    return 0;\n  }\n\n  function gcd(a, b) {\n\n    if (!a)\n      return b;\n    if (!b)\n      return a;\n\n    while (1) {\n      a %= b;\n      if (!a)\n        return b;\n      b %= a;\n      if (!b)\n        return a;\n    }\n  };\n\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction=} a\n   * @param {number=} b\n   */\n  function Fraction(a, b) {\n\n    if (!(this instanceof Fraction)) {\n      return new Fraction(a, b);\n    }\n\n    parse(a, b);\n\n    if (Fraction['REDUCE']) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse a\n    } else {\n      a = 1;\n    }\n\n    this[\"s\"] = P[\"s\"];\n    this[\"n\"] = P[\"n\"] / a;\n    this[\"d\"] = P[\"d\"] / a;\n  }\n\n  /**\n   * Boolean global variable to be able to disable automatic reduction of the fraction\n   *\n   */\n  Fraction['REDUCE'] = 1;\n\n  Fraction.prototype = {\n\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1,\n\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    \"abs\": function() {\n\n      return new Fraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    \"neg\": function() {\n\n      return new Fraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    \"add\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n              this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n              this[\"d\"] * P[\"d\"]\n              );\n    },\n\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    \"sub\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n              this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n              this[\"d\"] * P[\"d\"]\n              );\n    },\n\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    \"mul\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n              this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n              this[\"d\"] * P[\"d\"]\n              );\n    },\n\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    \"div\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n              this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n              this[\"d\"] * P[\"n\"]\n              );\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    \"clone\": function() {\n      return new Fraction(this);\n    },\n\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    \"mod\": function(a, b) {\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return new Fraction(NaN);\n      }\n\n      if (a === undefined) {\n        return new Fraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n      }\n\n      parse(a, b);\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        Fraction(0, 0); // Throw DivisionByZero\n      }\n\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n      return new Fraction(\n              this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n              P[\"d\"] * this[\"d\"]\n              );\n    },\n\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    \"gcd\": function(a, b) {\n\n      parse(a, b);\n\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return new Fraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    \"lcm\": function(a, b) {\n\n      parse(a, b);\n\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n        return new Fraction;\n      }\n      return new Fraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    \"ceil\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    \"floor\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    \"round\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Gets the inverse of the fraction, means numerator and denumerator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    \"inverse\": function() {\n\n      return new Fraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\n     * Calculates the fraction to some integer exponent\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    \"pow\": function(m) {\n\n      if (m < 0) {\n        return new Fraction(Math.pow(this['s'] * this[\"d\"], -m), Math.pow(this[\"n\"], -m));\n      } else {\n        return new Fraction(Math.pow(this['s'] * this[\"n\"], m), Math.pow(this[\"d\"], m));\n      }\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"equals\": function(a, b) {\n\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"compare\": function(a, b) {\n\n      parse(a, b);\n      var t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\n      return (0 < t) - (t < 0);\n    },\n\n    \"simplify\": function(eps) {\n\n      // First naive implementation, needs improvement\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return this;\n      }\n\n      var cont = this['abs']()['toContinued']();\n\n      eps = eps || 0.001;\n\n      function rec(a) {\n        if (a.length === 1)\n          return new Fraction(a[0]);\n        return rec(a.slice(1))['inverse']()['add'](a[0]);\n      }\n\n      for (var i = 0; i < cont.length; i++) {\n        var tmp = rec(cont.slice(0, i + 1));\n        if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {\n          return tmp['mul'](this['s']);\n        }\n      }\n      return this;\n    },\n\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    \"divisible\": function(a, b) {\n\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n    },\n\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    'valueOf': function() {\n\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\n    },\n\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"\n     **/\n    'toFraction': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n\n      if (d === 1) {\n        str += n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          str += \" \";\n          n %= d;\n        }\n\n        str += n;\n        str += '/';\n        str += d;\n      }\n      return str;\n    },\n\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    'toLatex': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n\n      if (d === 1) {\n        str += n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          n %= d;\n        }\n\n        str += \"\\\\frac{\";\n        str += n;\n        str += '}{';\n        str += d;\n        str += '}';\n      }\n      return str;\n    },\n\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    'toContinued': function() {\n\n      var t;\n      var a = this['n'];\n      var b = this['d'];\n      var res = [];\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return res;\n      }\n\n      do {\n        res.push(Math.floor(a / b));\n        t = a % b;\n        a = b;\n        b = t;\n      } while (a !== 1);\n\n      return res;\n    },\n\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    'toString': function(dec) {\n\n      var g;\n      var N = this[\"n\"];\n      var D = this[\"d\"];\n\n      if (isNaN(N) || isNaN(D)) {\n        return \"NaN\";\n      }\n\n      if (!Fraction['REDUCE']) {\n        g = gcd(N, D);\n        N /= g;\n        D /= g;\n      }\n\n      dec = dec || 15; // 15 = decimal places when no repitation\n\n      var cycLen = cycleLen(N, D); // Cycle length\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      var str = this['s'] === -1 ? \"-\" : \"\";\n\n      str += N / D | 0;\n\n      N %= D;\n      N *= 10;\n\n      if (N)\n        str += \".\";\n\n      if (cycLen) {\n\n        for (var i = cycOff; i--; ) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n        str += \"(\";\n        for (var i = cycLen; i--; ) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n        str += \")\";\n      } else {\n        for (var i = dec; N && i--; ) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n      }\n      return str;\n    }\n  };\n\n  if (typeof define === \"function\" && define[\"amd\"]) {\n    define([], function() {\n      return Fraction;\n    });\n  } else if (typeof exports === \"object\") {\n    Object.defineProperty(exports, \"__esModule\", {'value': true});\n    Fraction['default'] = Fraction;\n    Fraction['Fraction'] = Fraction;\n    module['exports'] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n\n})(this);\n","\"use strict\";\n/**\n * An enumeration which specifies whether a unit represents a singular value (1),\n * a plural value, or might represent either.\n */\nexport var Plurality;\n(function (Plurality) {\n    /**\n     * The unit is only a singular representation.\n     */\n    Plurality[Plurality[\"SINGULAR\"] = 0] = \"SINGULAR\";\n    /**\n     * The unit is only a plural representation.\n     */\n    Plurality[Plurality[\"PLURAL\"] = 1] = \"PLURAL\";\n    /**\n     * The unit can be used as singular and plural.\n     */\n    Plurality[Plurality[\"EITHER\"] = 2] = \"EITHER\";\n})(Plurality = Plurality || (Plurality = {}));\n//# sourceMappingURL=Plurality.js.map","\"use strict\";\n/**\n * An enumeration which specifies what system of measurement a unit belongs to\n * or specifies which system a user desires for output or conversions.\n *\n * @see [[Group]]\n * @see [[Transform]]\n */\nexport var System;\n(function (System) {\n    /**\n     * The Metrix System of Measurement.\n     */\n    System[System[\"METRIC\"] = 0] = \"METRIC\";\n    /**\n     * The US \"traditional systems of weights and measures\". Also known as\n     * \"Standard\", \"Customary\", or, erroneously: \"Imperial\", or \"English\".\n     */\n    System[System[\"US\"] = 1] = \"US\";\n    /**\n     * A value for groups when the unit does not belong to a system.\n     */\n    System[System[\"NONE\"] = 2] = \"NONE\";\n    /**\n     * A value for transforms which specify that the user or developer are looking\n     * to get results in any system.\n     */\n    System[System[\"ANY\"] = 3] = \"ANY\";\n    /**\n     * A value for transforms which specify that the user or developer are looking\n     * to get results in the same system that is already being used for a range.\n     * If a current system cannot be determined then any system is returned.\n     */\n    System[System[\"GIVEN\"] = 4] = \"GIVEN\";\n})(System = System || (System = {}));\n//# sourceMappingURL=System.js.map","\"use strict\";\n/**\n * The class which contains commonly used functions by the library. These\n * functions and variables exist in a class so they may be overridden if\n * desired.\n */\nvar Functions = (function () {\n    function Functions() {\n    }\n    /**\n     * Determines if the given number is zero.\n     *\n     * @param x The number to test.\n     * @return True if the number is zero, otherwise false.\n     * @see [[Functions.EPSILON]]\n     */\n    Functions.isZero = function (x) {\n        return this.abs(x) < this.EPSILON;\n    };\n    /**\n     * Determines if the given number is equal to another.\n     *\n     * @param a The first number to compare.\n     * @param b The second number to compare.\n     * @return True if the two numbers are equal.\n     * @see [[Functions.EPSILON]]\n     */\n    Functions.isEqual = function (a, b) {\n        return this.abs(a - b) < this.EPSILON;\n    };\n    /**\n     * Determines if the given number is a whole number (integer).\n     *\n     * @param x The number to test.\n     * @return True if the number is whole, otherwise false.\n     * @see [[Functions.EPSILON]]\n     */\n    Functions.isWhole = function (x) {\n        return this.abs(Math.floor(x) - x) < this.EPSILON;\n    };\n    /**\n     * Determines if the given number is singular. A singular number is 1 or -1.\n     *\n     * @param x The number to test.\n     * @return True if the number is singular, otherwise false.\n     * @see [[Functions.EPSILON]]\n     */\n    Functions.isSingular = function (x) {\n        return this.isNumber(x) && this.abs(this.abs(x) - 1) < this.EPSILON;\n    };\n    /**\n     * Determines if the given number is valid. A valid number is finite and not\n     * NaN or Infinity.\n     *\n     * @param x The number to test.\n     * @return True if the input is finite number.\n     */\n    Functions.isNumber = function (x) {\n        return isFinite(x);\n    };\n    /**\n     * Trims the given input if its a string.\n     *\n     * @param x The string to remove space from the beginning and end.\n     * @return A trimmed string.\n     */\n    Functions.trim = function (x) {\n        return x ? x.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '') : x;\n    };\n    /**\n     * Calculates the greatest common denominator between the two numbers. If\n     * either of the numbers are not whole (integers) then 1 is immediately\n     * returned.\n     *\n     * @param a The first number.\n     * @param b The second number.\n     * @return The greatest common denominator between the two numbers.\n     */\n    Functions.gcd = function (a, b) {\n        if (!this.isWhole(a) || !this.isWhole(b)) {\n            return 1;\n        }\n        var x = a < b ? a : b;\n        var y = a < b ? b : a;\n        x = this.abs(x);\n        y = this.abs(y);\n        while (y) {\n            var t = y;\n            y = x % y;\n            x = t;\n        }\n        return x;\n    };\n    /**\n     * Determines the absolute value of the given number.\n     *\n     * @param x The number to return the positive version of.\n     * @return The absolute value of x.\n     */\n    Functions.abs = function (x) {\n        return x < 0 ? -x : x;\n    };\n    /**\n     * Determines the sign of the given number. One of three values will be\n     * returned: 1, 0, or -1.\n     *\n     * @param x The number to determine the sign of.\n     * @return The sign of the given number.\n     */\n    Functions.sign = function (x) {\n        return x < 0 ? -1 : (x > 0 ? 1 : 0);\n    };\n    /**\n     * Appends an element or array of elements to the end of the given array.\n     *\n     * @param array The array to append values to the end of.\n     * @param input The element or array of elements to append to the end.\n     * @return The reference to the `array` given.\n     */\n    Functions.appendTo = function (array, input) {\n        if (input instanceof Array) {\n            array.push.apply(array, input);\n        }\n        else if (input) {\n            array.push(input);\n        }\n        return array;\n    };\n    /**\n     * Determines whether the given input looks like a [[GroupDefinition]].\n     *\n     * @param input The variable to inspect.\n     * @return True if the variable appears to be a [[GroupDefinition]].\n     */\n    Functions.isGroupDefinition = function (input) {\n        return !!(input && input.system && input.unit && input.denominators && input.units);\n    };\n    /**\n     * Determines whether the given input looks like a [[ValueDefinition]].\n     *\n     * @param input The variable to inspect.\n     * @return True if the variable appears to be a [[ValueDefinition]].\n     */\n    Functions.isValueDefinition = function (input) {\n        return !!(input && (input.value || input.unit || input.num || input.den));\n    };\n    /**\n     * Determines whether the given input looks like a [[RangeDefinition]].\n     *\n     * @param input The variable to inspect.\n     * @return True if the variable appears to be a [[RangeDefinition]].\n     */\n    Functions.isRangeDefinition = function (input) {\n        return !!(input && input.min && input.max);\n    };\n    /**\n     * Determines whether the given input is an array.\n     *\n     * @param input The variable to test.\n     * @return True if the variable is an array, otherwise false.\n     */\n    Functions.isArray = function (input) {\n        return input instanceof Array;\n    };\n    /**\n     * Determines whether the given input is a string.\n     *\n     * @param input The variable to test.\n     * @return True if the variable is a string, otherwise false.\n     */\n    Functions.isString = function (input) {\n        return typeof (input) === 'string';\n    };\n    /**\n     * Determines whether the given input is defined.\n     *\n     * @param input The variable to test.\n     * @return True if the variable is defined, otherwise false.\n     */\n    Functions.isDefined = function (input) {\n        return typeof (input) !== 'undefined';\n    };\n    /**\n     * Returns the first argument which is defined.\n     *\n     * @param a The first argument to look at.\n     * @param b The second argument to look at.\n     * @return The first defined argument.\n     * @see [[Functions.isDefined]]\n     */\n    Functions.coalesce = function (a, b) {\n        return this.isDefined(a) ? a : b;\n    };\n    /**\n     * The maximum distance a number can be from another to be considered\n     * equivalent. This is to compensate for floating point precision issues.\n     */\n    Functions.EPSILON = 0.00001;\n    return Functions;\n}());\nexport { Functions };\n//# sourceMappingURL=Functions.js.map","\"use strict\";\nimport { Plurality } from './Plurality';\nimport { Functions as fn } from './Functions';\n/**\n * A unit and its aliases as well as their plurality.\n *\n * A group is relative to a base group or is a base group itself. As unit\n * aliases are added to the group it determines the appropriate plural and\n * singular long and short versions given the unit aliases in this group.\n */\nvar Group = (function () {\n    /**\n     * Creates a new instance of Group given a definition and the parent class.\n     *\n     * @param definition The definition of the group.\n     * @param parent The class which contains this group.\n     */\n    function Group(definition, parent) {\n        /**\n         * The scale of this group relative to the base group. This is used for\n         * conversions of values with the same base group.\n         */\n        this.baseScale = 1;\n        /**\n         * The scale of this group relative to the first base group added to the\n         * class. This is used to compare numbers of the same class across all bases.\n         */\n        this.classScale = 0;\n        /**\n         * Whether this group was dynamically created by user input having units\n         * not mapped to groups by the developer.\n         */\n        this.dynamic = false;\n        this.system = definition.system;\n        this.common = !!definition.common;\n        this.unit = definition.unit;\n        this.baseUnit = definition.baseUnit;\n        this.preferredUnit = definition.preferredUnit || definition.unit;\n        this.relativeUnit = definition.relativeUnit;\n        this.relativeScale = definition.relativeScale || 1;\n        this.units = definition.units;\n        this.denominators = definition.denominators;\n        this.parent = parent;\n        this.updateUnits();\n    }\n    Object.defineProperty(Group.prototype, \"isBase\", {\n        /**\n         * True if this group is a base group, otherwise false.\n         */\n        get: function () {\n            return this.unit === this.baseUnit;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the dynamic flag of this group.\n     *\n     * @param dynamic Whether this group is dynamic or not.\n     * @return The reference to this instance.\n     */\n    Group.prototype.setDynamic = function (dynamic) {\n        if (dynamic === void 0) { dynamic = true; }\n        this.dynamic = dynamic;\n        return this;\n    };\n    /**\n     * Adds a denominator or array of denominators to this group.\n     *\n     * @param denominators A denominator or an array of denominators to add.\n     * @return The reference to this instance.\n     */\n    Group.prototype.addDenominator = function (denominators) {\n        fn.appendTo(this.denominators, denominators);\n        return this;\n    };\n    /**\n     * Sets the denominators of this group.\n     *\n     * @param denominators The new denominators for this group.\n     * @return The reference to this instance.\n     * @see [[Group.denominators]]\n     */\n    Group.prototype.setDenominators = function (denominators) {\n        this.denominators = denominators;\n        return this;\n    };\n    /**\n     * Sets the common flag of this group.\n     *\n     * @param common Whether this group is common or not.\n     * @return The reference to this instance.\n     * @see [[Group.common]]\n     */\n    Group.prototype.setCommon = function (common) {\n        if (common === void 0) { common = true; }\n        this.common = common;\n        return this;\n    };\n    /**\n     * Sets the preferred unit of this group.\n     *\n     * @param unit The preferred unit of this group.\n     * @return The reference to this instance.\n     * @see [[Group.preferredUnit]]\n     */\n    Group.prototype.setPreferred = function (unit) {\n        this.preferredUnit = unit;\n        return this;\n    };\n    /**\n     * Adds the given unit aliases to this group and the parent class.\n     *\n     * @param units The units to add to the group and class.\n     * @return The reference to this instance.\n     * @see [[Class.addGroupUnit]]\n     */\n    Group.prototype.addUnits = function (units) {\n        var parent = this.parent;\n        for (var unit in units) {\n            this.units[unit] = units[unit];\n            parent.addGroupUnit(unit, this);\n        }\n        this.updateUnits();\n        return this;\n    };\n    /**\n     * Removes the given unit aliases from this group and the parent class.\n     *\n     * @param units The array of unit aliases to remove.\n     * @return The reference to this instance.\n     * @see [[Class.removeGroupUnit]]\n     */\n    Group.prototype.removeUnits = function (units) {\n        var parent = this.parent;\n        var existing = this.units;\n        for (var i = 0; i < units.length; i++) {\n            var unit = units[i];\n            if (unit in existing) {\n                delete existing[unit];\n                parent.removeGroupUnit(unit, this);\n            }\n        }\n        return this;\n    };\n    /**\n     * Updates the singular and plural long and short form units for this group.\n     *\n     * @return The reference to this instance.\n     */\n    Group.prototype.updateUnits = function () {\n        this.singularShort = null;\n        this.singularLong = null;\n        this.pluralShort = null;\n        this.pluralLong = null;\n        for (var unit in this.units) {\n            var plurality = this.units[unit];\n            if (plurality !== Plurality.PLURAL) {\n                if (!this.singularShort || unit.length < this.singularShort.length) {\n                    this.singularShort = unit;\n                }\n                if (!this.singularLong || unit.length > this.singularLong.length) {\n                    this.singularLong = unit;\n                }\n            }\n            if (plurality !== Plurality.SINGULAR) {\n                if (!this.pluralShort || unit.length < this.pluralShort.length) {\n                    this.pluralShort = unit;\n                }\n                if (!this.pluralLong || unit.length > this.pluralLong.length) {\n                    this.pluralLong = unit;\n                }\n            }\n        }\n        return this;\n    };\n    /**\n     * Invokes a callback for each group in the parent class that are visible\n     * based on the given transform relative to this group.\n     *\n     * @param transform The transform which decides what groups are visible.\n     * @param reverse If the groups of the class should be iterated in reverse.\n     * @param callback A function to invoke with all visible groups found and the\n     *  index of that group in the set of visible groups. If `false` is returned\n     *  by the function iteration of visible groups ceases.\n     * @param callback.group The current visible group.\n     * @param callback.index The index of the current visible group.\n     * @see [[Transform.isVisibleGroup]]\n     */\n    Group.prototype.matches = function (transform, reverse, callback) {\n        if (this.parent) {\n            this.parent.getVisibleGroups(transform, reverse, this, callback);\n        }\n    };\n    return Group;\n}());\nexport { Group };\n//# sourceMappingURL=Group.js.map","\"use strict\";\nimport { Group } from './Group';\n/**\n * A collection of groups and their units with the logic on how to convert\n * between groups with differing base units.\n *\n * A class is essentially something like \"Length\" where base units are \"inches\"\n * and \"millimeters\" and there are various other groups based off of these\n * base groups like \"feet\", \"centimeters\", and \"meters\".\n *\n * A class is responsible for being the sole place where conversion is done\n * between different groups in the same class.\n *\n * @see [[Class.convert]]\n */\nvar Class = (function () {\n    /**\n     * Creates a new instance of Class given the name of the class and optionally\n     * the groups of the class.\n     *\n     * @param name The unique name of the class.\n     * @param groups The optional list of groups to populate the class with.\n     */\n    function Class(name, groups) {\n        this.name = name;\n        this.groupMap = {};\n        this.groups = [];\n        this.converters = {};\n        if (groups) {\n            this.addGroups(groups);\n        }\n    }\n    /**\n     * Adds the group definitions to this class.\n     *\n     * @param definitions The array of group definitions.\n     * @return The reference to this instance.\n     * @see [[Class.addGroup]]\n     */\n    Class.prototype.addGroups = function (definitions) {\n        for (var i = 0; i < definitions.length; i++) {\n            this.addGroup(definitions[i]);\n        }\n        return this;\n    };\n    /**\n     * Adds a group definition to this class. If the group is relative to another\n     * group the [[Group.baseScale]] and [[Group.baseUnit]] are set to appropriate\n     * values.\n     *\n     * @param definition The group definition.\n     * @return The instance of the group created from the definition.\n     * @see [[Class.addGroupUnit]]\n     */\n    Class.prototype.addGroup = function (definition) {\n        var group = new Group(definition, this);\n        var relativeUnit = group.relativeUnit, relativeScale = group.relativeScale, units = group.units;\n        if (relativeUnit) {\n            var relative = this.groupMap[relativeUnit];\n            group.baseScale = relativeScale * relative.baseScale;\n            group.baseUnit = relative.baseUnit;\n        }\n        for (var alias in units) {\n            this.addGroupUnit(alias, group);\n        }\n        this.groups.push(group);\n        return group;\n    };\n    /**\n     * Adds the unit to this class for the given group. If the lowercase version\n     * of the unit has not been mapped yet it will be mapped to the given group.\n     *\n     * @param unit The unit to map to the group.\n     * @param group The group which has the unit.\n     * @return The reference to this instance.\n     */\n    Class.prototype.addGroupUnit = function (unit, group) {\n        var lower = unit.toLowerCase();\n        this.groupMap[unit] = group;\n        if (!this.groupMap[lower]) {\n            this.groupMap[lower] = group;\n        }\n        return this;\n    };\n    /**\n     * Removes the given unit associated to the given group from the class. If the\n     * group is not mapped to this unit then this has no effect.\n     *\n     * @param unit The unit to remove from this class.\n     * @param group The group which has the unit.\n     * @return The reference to this instance.\n     */\n    Class.prototype.removeGroupUnit = function (unit, group) {\n        var lower = unit.toLowerCase();\n        if (this.groupMap[unit] === group) {\n            delete this.groupMap[unit];\n        }\n        if (this.groupMap[lower] === group) {\n            delete this.groupMap[lower];\n        }\n        return this;\n    };\n    /**\n     * Determines the first group in this class which is a base group.\n     *\n     * @see [[Group.isBase]]\n     */\n    Class.prototype.getFirstBase = function () {\n        var groups = this.groups;\n        for (var i = 0; i < groups.length; i++) {\n            var group = groups[i];\n            if (group.isBase) {\n                return group;\n            }\n        }\n        return null;\n    };\n    /**\n     * Updates the [[Group.classScale]] value in each group in this class so that\n     * there is a baseline for comparing one group to another no matter the base\n     * unit. For comparing in the same base, you can use [[Group.baseScale]].\n     *\n     * @return The reference to this instance.\n     */\n    Class.prototype.setClassScales = function () {\n        var groups = this.groups;\n        var first = this.getFirstBase();\n        if (first) {\n            for (var i = 0; i < groups.length; i++) {\n                var group = groups[i];\n                if (group.baseUnit === first.baseUnit) {\n                    group.classScale = group.baseScale;\n                }\n                else if (group.baseUnit in this.converters) {\n                    group.classScale = this.converters[group.baseUnit][first.baseUnit](group.baseScale);\n                }\n            }\n        }\n        return this;\n    };\n    /**\n     * Sets the conversion function between the two base units.\n     *\n     * @param fromUnit The base unit to convert from.\n     * @param toUnit The base unit to convert to.\n     * @param converter The function to pass the value to convert.\n     * @return The reference to this instance.\n     */\n    Class.prototype.setBaseConversion = function (fromUnit, toUnit, converter) {\n        var converters = this.converters;\n        converters[fromUnit] = converters[fromUnit] || {};\n        converters[fromUnit][toUnit] = converter;\n        return this;\n    };\n    /**\n     * Determines which groups in this class are visible according to the given\n     * transform. The groups can be iterated in reverse and can optionally take\n     * a related group into consideration (when the system is GIVEN, we want to\n     * return the groups with the same system).\n     *\n     * @param transform The transform which decides what groups are visible.\n     * @param reverse If the groups of this class should be iterated in reverse.\n     * @param relatedGroup A related group which may be used for visibility if the\n     *  [[Transform.system]] is [[System.GIVEN]].\n     * @param callback A function to invoke with all visible groups found and the\n     *  index of that group in the set of visible groups. If `false` is returned\n     *  by the function iteration of visible groups ceases.\n     * @param callback.group The current visible group.\n     * @param callback.index The index of the current visible group.\n     * @see [[Transform.isVisibleGroup]]\n     */\n    Class.prototype.getVisibleGroups = function (transform, reverse, relatedGroup, callback) {\n        var groups = this.groups;\n        var matched = 0;\n        var start = reverse ? groups.length - 1 : 0;\n        var stop = reverse ? -1 : groups.length;\n        var increment = reverse ? -1 : 1;\n        for (var i = start; i !== stop; i += increment) {\n            var group = groups[i];\n            if (transform.isVisibleGroup(group, relatedGroup)) {\n                var result = callback(group, matched++);\n                if (result === false) {\n                    break;\n                }\n            }\n        }\n    };\n    /**\n     * Converts the given number from a given group to a given group. If the two\n     * groups are the same or one or both of the groups are not provided then the\n     * `value` provided is returned. If the two groups have differing base units\n     * the [[Class.converters]] map is used to convert the `value` over to the\n     * proper base. If the [[Class.converters]] map is missing a base conversion\n     * zero is returned. This might happen if a group is passed to this function\n     * which does not belong to this class OR if the user has impromperly setup\n     * their own classes.\n     *\n     * @param value The number to convert.\n     * @param from The group of the number to convert from.\n     * @param to The group to convert to.\n     * @param invalid The value to return if a conversion between the two groups\n     *  could not be made.\n     * @return The converted number or zero if a base conversion could not be found.\n     */\n    Class.prototype.convert = function (value, from, to, invalid) {\n        if (invalid === void 0) { invalid = 0; }\n        if (from === to || !from || !to) {\n            return value;\n        }\n        var converted = value * from.baseScale;\n        if (from.baseUnit !== to.baseUnit) {\n            var map = this.converters[from.baseUnit];\n            if (!map || !map[to.baseUnit]) {\n                return invalid;\n            }\n            var converter = map[to.baseUnit];\n            converted = converter(converted);\n        }\n        return converted / to.baseScale;\n    };\n    return Class;\n}());\nexport { Class };\n//# sourceMappingURL=Class.js.map","\"use strict\";\nimport { Functions as fn } from './Functions';\n/**\n * The enumeration which decides what unit to use when converting to a string.\n */\nexport var OutputUnit;\n(function (OutputUnit) {\n    /**\n     * This value will keep units from being displayed.\n     */\n    OutputUnit[OutputUnit[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * This value will ensure the unit exactly as the user entered it is used in\n     * the output no matter whether the value's plurality matches the given\n     * unit's plurality.\n     *\n     * @see [[Value.unit]]\n     */\n    OutputUnit[OutputUnit[\"GIVEN\"] = 1] = \"GIVEN\";\n    /**\n     * This value will force the short versions of the unit to be used.\n     *\n     * @see [[Group.singularShort]]\n     * @see [[Group.pluralShort]]\n     */\n    OutputUnit[OutputUnit[\"SHORT\"] = 2] = \"SHORT\";\n    /**\n     * This value will force the long versions of the unit to be used.\n     *\n     * @see [[Group.singularLong]]\n     * @see [[Group.pluralLong]]\n     */\n    OutputUnit[OutputUnit[\"LONG\"] = 3] = \"LONG\";\n})(OutputUnit = OutputUnit || (OutputUnit = {}));\n/**\n * The enumeration which decides how a value will be converted to a string.\n */\nexport var OutputFormat;\n(function (OutputFormat) {\n    /**\n     * The format of the user input will be used if possible.\n     */\n    OutputFormat[OutputFormat[\"GIVEN\"] = 0] = \"GIVEN\";\n    /**\n     * All values will be displayed using their decimal representation.\n     */\n    OutputFormat[OutputFormat[\"NUMBER\"] = 1] = \"NUMBER\";\n    /**\n     * All values will be displayed as a mixed fraction if the value is a fraction.\n     * A mixed fraction has a whole number followed by a fraction where the\n     * numerator is smaller than the denominator.\n     *\n     * @see [[Value.isFraction]]\n     */\n    OutputFormat[OutputFormat[\"MIXED\"] = 2] = \"MIXED\";\n    /**\n     * All values will be displayed as an improper fraction if the value is a\n     * fraction and the numerator is larger than the denoninator.\n     *\n     * @see [[Value.isFraction]]\n     */\n    OutputFormat[OutputFormat[\"IMPROPER\"] = 3] = \"IMPROPER\";\n})(OutputFormat = OutputFormat || (OutputFormat = {}));\n/**\n * The class which converts Unitz objects to strings.\n */\nvar Output = (function () {\n    /**\n     * Creates a new instance of Output with an optional set of options to\n     * override the default values.\n     *\n     * @param input The options to apply to the new instance.\n     */\n    function Output(input) {\n        /**\n         * The option that specifies which units are chosen.\n         */\n        this.unit = OutputUnit.GIVEN;\n        /**\n         * The option that specifies how values are displayed.\n         */\n        this.format = OutputFormat.GIVEN;\n        /**\n         * Whether or not a unit should be displayed for the minimum and maximum of a\n         * range when they have the same group.\n         */\n        this.repeatUnit = false;\n        /**\n         * The spacing used between the value and the unit.\n         */\n        this.unitSpacer = '';\n        /**\n         * The spacing used between the minimum and maximum values in a range.\n         */\n        this.rangeSpacer = ' - ';\n        /**\n         * The spacing used to separate the numerator and denominator of a fraction.\n         */\n        this.fractionSpacer = '/';\n        /**\n         * The spacing used to seperate a mixed number from the fraction.\n         */\n        this.mixedSpacer = ' ';\n        /**\n         * The spacing used to separate a unit and the rate unit.\n         */\n        this.rateSpacer = '/';\n        /**\n         * The delimiter used to separate ranges.\n         */\n        this.delimiter = ', ';\n        /**\n         * An option used to restrict numbers from displaying large decimal numbers.\n         * When this value is set to -1 numbers are displayed fully. If the value is\n         * set to zero all numbers will be truncated to the whole version.\n         */\n        this.significant = -1;\n        if (fn.isDefined(input)) {\n            this.set(input);\n        }\n    }\n    /**\n     * Overrides values in this instance with ones specified in input.\n     *\n     * @param input The values to override.\n     * @return The reference to this instance.\n     */\n    Output.prototype.set = function (input) {\n        this.unit = fn.coalesce(input.unit, this.unit);\n        this.format = fn.coalesce(input.format, this.format);\n        this.repeatUnit = fn.coalesce(input.repeatUnit, this.repeatUnit);\n        this.unitSpacer = fn.coalesce(input.unitSpacer, this.unitSpacer);\n        this.rangeSpacer = fn.coalesce(input.rangeSpacer, this.rangeSpacer);\n        this.fractionSpacer = fn.coalesce(input.fractionSpacer, this.fractionSpacer);\n        this.mixedSpacer = fn.coalesce(input.mixedSpacer, this.mixedSpacer);\n        this.rateSpacer = fn.coalesce(input.rateSpacer, this.rateSpacer);\n        this.delimiter = fn.coalesce(input.delimiter, this.delimiter);\n        this.significant = fn.coalesce(input.significant, this.significant);\n        return this;\n    };\n    /**\n     * Returns an Output instance which matches the desired options. If no options\n     * are specified the reference to this instance is returned. If the options\n     * are already an instance of Output its returned. If options are specified\n     * a new instance is created with the options of this instance, and the given\n     * options applied with [[Output.set]].\n     *\n     * @param input The options desired.\n     * @return An instance of this class which matches the desired options.\n     */\n    Output.prototype.extend = function (input) {\n        var extended = this;\n        if (fn.isDefined(input)) {\n            if (input instanceof Output) {\n                extended = input;\n            }\n            else {\n                extended = new Output(this);\n                extended.set(input);\n            }\n        }\n        return extended;\n    };\n    /**\n     * Converts the list of ranges to a string. If a range is not valid it is\n     * skipped.\n     *\n     * @param ranges The list of ranges to convert.\n     * @return The string representation of the input.\n     */\n    Output.prototype.ranges = function (ranges) {\n        var out = '';\n        for (var i = 0; i < ranges.length; i++) {\n            var range = ranges[i];\n            if (range.isValid) {\n                if (out.length) {\n                    out += this.delimiter;\n                }\n                out += this.range(range);\n            }\n        }\n        return out;\n    };\n    /**\n     * Converts the range to a string.\n     *\n     * @param ranges The range to convert.\n     * @return The string representation of the input.\n     */\n    Output.prototype.range = function (range) {\n        var out = '';\n        if (!range.isValid) {\n            // nothing\n        }\n        else if (range.isFixed) {\n            out += this.value(range.min);\n        }\n        else {\n            var minUnit = this.repeatUnit || range.min.unit !== range.max.unit;\n            out += this.value(range.min, minUnit);\n            out += this.rangeSpacer;\n            out += this.value(range.max);\n        }\n        return out;\n    };\n    /**\n     * Converts the value to the string optionally showing or hiding the unit.\n     *\n     * @param value The value to convert.\n     * @param showUnit Whether or not the unit should be added to the string.\n     * @return The string representation of the input.\n     */\n    Output.prototype.value = function (value, showUnit) {\n        if (showUnit === void 0) { showUnit = true; }\n        var out = '';\n        if (!value.isValid) {\n        }\n        else if (this.isFraction(value)) {\n            if (this.isMixed(value)) {\n                out += value.mixedWhole;\n                out += this.mixedSpacer;\n                out += value.mixedNum;\n                out += this.fractionSpacer;\n                out += value.den;\n            }\n            else {\n                out += value.num;\n                out += this.fractionSpacer;\n                out += value.den;\n            }\n        }\n        else {\n            out += this.number(value.value);\n        }\n        if (showUnit && this.unit !== OutputUnit.NONE && value.isValid) {\n            out += this.unitSpacer;\n            out += this.units(value);\n        }\n        return out;\n    };\n    /**\n     * Generates a full unit string including the rate unit if it exists.\n     *\n     * @param value The value to generate a unit for.\n     * @return The units string representation.\n     */\n    Output.prototype.units = function (value) {\n        var out = '';\n        out += this.group(value.value, value.unit, value.group);\n        if (value.rateGroup) {\n            out += this.rateSpacer;\n            out += this.group(value.value, value.rate, value.rateGroup);\n        }\n        return out;\n    };\n    /**\n     * Generates a unit string given the value, the current unit, and its group.\n     *\n     * @param value The value to generate a unit for.\n     * @param unit The unit to potentially use.\n     * @param group The group of the unit.\n     * @return The unit determined based on the options.\n     */\n    Output.prototype.group = function (value, unit, group) {\n        if (this.isLongUnit(group)) {\n            return fn.isSingular(value) ? group.singularLong : group.pluralLong;\n        }\n        else if (this.isShortUnit(group) || (group && group.dynamic)) {\n            return fn.isSingular(value) ? group.singularShort : group.pluralShort;\n        }\n        return unit;\n    };\n    /**\n     * Converts the number to a string.\n     *\n     * @param x The number to convert.\n     * @return The string representation of the input.\n     */\n    Output.prototype.number = function (x) {\n        var valueString = x + '';\n        if (this.significant >= 0 && valueString !== '0') {\n            var valueSignificant = x\n                .toFixed(this.significant)\n                .replace(/0*$/, '')\n                .replace(/\\.$/, '');\n            return valueSignificant.length < valueString.length ? valueSignificant : valueString;\n        }\n        return valueString;\n    };\n    /**\n     * Determines whether the value should be displayed as a fraction.\n     *\n     * @param value The value to look at.\n     * @return True if the value should be displayed as a fraction, otherwise false.\n     */\n    Output.prototype.isFraction = function (value) {\n        return value.isFraction && this.format !== OutputFormat.NUMBER;\n    };\n    /**\n     * Determines whether the value should be displayed as a number.\n     *\n     * @param value The value to look at.\n     * @return True if the value should be displayed as a number, otherwise false.\n     */\n    Output.prototype.isNumber = function (value) {\n        return value.isValid && !this.isFraction(value);\n    };\n    /**\n     * Determines whether the value should be displayed as a mixed fraction. This\n     * assumes [[Output.isFraction]] was already checked and returned true.\n     *\n     * @param value The value to look at.\n     * @return True if the value should be displayed as a mixed fraction, otherwise false.\n     */\n    Output.prototype.isMixed = function (value) {\n        return value.mixedWhole !== 0 && this.format !== OutputFormat.IMPROPER;\n    };\n    /**\n     * Determines whether the short unit should be displayed.\n     *\n     * @param group The group of the unit.\n     * @return True if the short unit should be displayed, otherwise false.\n     */\n    Output.prototype.isShortUnit = function (group) {\n        return group && this.unit === OutputUnit.SHORT;\n    };\n    /**\n     * Determines whether the long unit should be displayed.\n     *\n     * @param group The group of the unit.\n     * @return True if the short unit should be displayed, otherwise false.\n     */\n    Output.prototype.isLongUnit = function (group) {\n        return group && this.unit === OutputUnit.LONG;\n    };\n    return Output;\n}());\nexport { Output };\n//# sourceMappingURL=Output.js.map","\"use strict\";\nimport { Functions as fn } from './Functions';\nimport { System } from './System';\n/**\n * THe class which controls which units and values are acceptable when\n * transforming a set of ranges.\n *\n * @see [[Base.normalize]]\n * @see [[Base.compact]]\n * @see [[Base.expand]]\n * @see [[Base.conversions]]\n * @see [[Base.filter]]\n */\nvar Transform = (function () {\n    /**\n     * Creates a new instance of Transform with an optional set of options to\n     * override the default values.\n     *\n     * @param input The options to apply to the new instance.\n     */\n    function Transform(input) {\n        /**\n         * The option which determines whether only common or any group are valid.\n         * To only include common units this value must be `true` and to include\n         * common and uncommon this value must be `false`.\n         */\n        this.common = true;\n        /**\n         * The desired system for the transformation.\n         */\n        this.system = System.GIVEN;\n        /**\n         * The mimimum allowed value for the transformation.\n         */\n        this.min = -Number.MAX_VALUE;\n        /**\n         * The maximum allowed value for the transformation.\n         */\n        this.max = Number.MAX_VALUE;\n        /**\n         * Whether the minimum or maximum value of a range is used when producing\n         * conversions.\n         */\n        this.convertWithMax = true;\n        /**\n         * Whether conversions should convert the main unit.\n         */\n        this.convertUnit = true;\n        /**\n         * Whether conversions should convert the rate unit.\n         */\n        this.convertRate = false;\n        /**\n         * Whether ranges without units are considered valid for the transformation.\n         */\n        this.groupless = true;\n        if (fn.isDefined(input)) {\n            this.set(input);\n        }\n    }\n    /**\n     * Overrides values in this instance with ones specified in input.\n     *\n     * @param input The values to override.\n     * @return The reference to this instance.\n     */\n    Transform.prototype.set = function (input) {\n        this.common = fn.coalesce(input.common, this.common);\n        this.system = fn.coalesce(input.system, this.system);\n        this.min = fn.coalesce(input.min, this.min);\n        this.max = fn.coalesce(input.max, this.max);\n        this.groupless = fn.coalesce(input.groupless, this.groupless);\n        this.convertWithMax = fn.coalesce(input.convertWithMax, this.convertWithMax);\n        this.convertUnit = fn.coalesce(input.convertUnit, this.convertUnit);\n        this.convertRate = fn.coalesce(input.convertRate, this.convertRate);\n        this.onlyUnits = fn.coalesce(input.onlyUnits, this.onlyUnits);\n        this.notUnits = fn.coalesce(input.notUnits, this.notUnits);\n        this.onlyClasses = fn.coalesce(input.onlyClasses, this.onlyClasses);\n        this.notClasses = fn.coalesce(input.notClasses, this.notClasses);\n        return this;\n    };\n    /**\n     * Returns a Transform instance which matches the desired options. If no\n     * options are specified the reference to this instance is returned. If the\n     * options are already an instance of Transform its returned. If options are\n     * specified a new instance is created with the options of this instance, and\n     * the given options applied with [[Transform.set]].\n     *\n     * @param input The options desired.\n     * @return An instance of this class which matches the desired options.\n     */\n    Transform.prototype.extend = function (input) {\n        var extended = this;\n        if (fn.isDefined(input)) {\n            if (input instanceof Transform) {\n                extended = input;\n            }\n            else {\n                extended = new Transform(this);\n                extended.set(input);\n            }\n        }\n        return extended;\n    };\n    /**\n     * Determines whether the given range is valid according to this instance.\n     *\n     * @param range The range to test.\n     * @return True if the range matches this transform, otherwise false.\n     */\n    Transform.prototype.isValidRange = function (range) {\n        if (range.max.value < this.min) {\n            return false;\n        }\n        if (range.min.value > this.max) {\n            return false;\n        }\n        var group = this.convertWithMax ? range.max.group : range.min.group;\n        return this.isVisibleGroup(group);\n    };\n    /**\n     * Determines whether the given group (and optionally a current group) is\n     * valid or visible according to this instance.\n     *\n     * @param group The group to test.\n     * @param givenGroup The current group if available.\n     * @return True if the group matches this transform, otherwise false.\n     */\n    Transform.prototype.isVisibleGroup = function (group, givenGroup) {\n        if (!group) {\n            return this.groupless;\n        }\n        return this.isCommonMatch(group) &&\n            this.isSystemMatch(group, givenGroup) &&\n            this.isUnitMatch(group) &&\n            this.isClassMatch(group.parent);\n    };\n    /**\n     * Determines whether the given group matches the common option on this\n     * instance.\n     *\n     * @param group The group to test.\n     * @return True if the group matches the common option, otherwise false.\n     */\n    Transform.prototype.isCommonMatch = function (group) {\n        return !this.common || group.common;\n    };\n    /**\n     * Determines whether the given group (and optionally a current group)\n     * matches the system option on this instance.\n     *\n     * @param group The group to test.\n     * @param givenGroup The current group if available.\n     * @return True if the group matches ths system option, otherwise false.\n     */\n    Transform.prototype.isSystemMatch = function (group, givenGroup) {\n        switch (this.system) {\n            case System.METRIC:\n                return group.system === System.METRIC || group.system === System.ANY;\n            case System.US:\n                return group.system === System.US || group.system === System.ANY;\n            case System.NONE:\n                return false;\n            case System.ANY:\n                return true;\n            case System.GIVEN:\n                return !givenGroup || group.baseUnit === givenGroup.baseUnit;\n        }\n        return false;\n    };\n    /**\n     * Determines whether the given class matches the classes options on this\n     * instance.\n     *\n     * @param parent The class to test.\n     * @return True if the class matches the classes options, otherwise false.\n     */\n    Transform.prototype.isClassMatch = function (parent) {\n        if (this.onlyClasses) {\n            return this.onlyClasses.indexOf(parent.name) !== -1;\n        }\n        if (this.notClasses) {\n            return this.notClasses.indexOf(parent.name) === -1;\n        }\n        return true;\n    };\n    /**\n     * Determines whether the given group matches the unit options on this\n     * instance.\n     *\n     * @param group The group to test.\n     * @return True if the group matches the unit options, otherwise false.\n     */\n    Transform.prototype.isUnitMatch = function (group) {\n        if (this.onlyUnits) {\n            return this.onlyUnits.indexOf(group.unit) !== -1;\n        }\n        if (this.notUnits) {\n            return this.notUnits.indexOf(group.unit) === -1;\n        }\n        return true;\n    };\n    return Transform;\n}());\nexport { Transform };\n//# sourceMappingURL=Transform.js.map","\"use strict\";\nimport { Functions as fn } from './Functions';\n/**\n * The enumeration which decides what value in a range should be used when\n * sorting between ranges with differing minimum and maximum values.\n */\nexport var SortType;\n(function (SortType) {\n    /**\n     * This value will use the minimum of the ranges to sort by.\n     */\n    SortType[SortType[\"MIN\"] = 0] = \"MIN\";\n    /**\n     * This value will use the maximum of the ranges to sort by.\n     */\n    SortType[SortType[\"MAX\"] = 1] = \"MAX\";\n    /**\n     * This value will use the average of the ranges to sort by.\n     */\n    SortType[SortType[\"AVERAGE\"] = 2] = \"AVERAGE\";\n})(SortType = SortType || (SortType = {}));\n/**\n * The class which determines how to sort ranges.\n */\nvar Sort = (function () {\n    /**\n     * Creates a new instance of Sort with an optional set of options to override\n     * the default values.\n     *\n     * @param input The options to apply to the new instance.\n     */\n    function Sort(input) {\n        /**\n         * If the ranges should be in ascending order (small values followed by large\n         * values). The default value is in descending order.\n         */\n        this.ascending = false;\n        /**\n         * How ranges should be compared when the minimum and maximum values differ.\n         */\n        this.type = SortType.MAX;\n        /**\n         * This object describes how ranges of different classes should be sorted by\n         * given each class a priority. If a class is not defined here the priority\n         * assumed is zero.\n         */\n        this.classes = {};\n        if (fn.isDefined(input)) {\n            this.set(input);\n        }\n    }\n    /**\n     * Overrides values in this instance ith ones specified in the input. If class\n     * sorting options are specified they are merged into this instance as opposed\n     * to a complete overwrite.\n     *\n     * @param input The values to override.\n     * @return The reference to this instance.\n     */\n    Sort.prototype.set = function (input) {\n        this.ascending = fn.coalesce(input.ascending, this.ascending);\n        this.type = fn.coalesce(input.type, this.type);\n        if (fn.isDefined(input.classes)) {\n            for (var className in input.classes) {\n                this.classes[className] = input.classes[className];\n            }\n        }\n        return this;\n    };\n    /**\n     * Returns a Sort instance which matches the desired options. If no options\n     * are specified the reference to this instance is returned. If the options\n     * are already an instance of Sort its returned. If options are specified\n     * a new instance is created with the options of this instance, and the given\n     * options applied with [[Sort.set]].\n     *\n     * @param input The options desired.\n     * @return An instance of this class which matches the desired options.\n     */\n    Sort.prototype.extend = function (input) {\n        var extended = this;\n        if (fn.isDefined(input)) {\n            if (input instanceof Sort) {\n                extended = input;\n            }\n            else {\n                extended = new Sort(this);\n                extended.set(input);\n            }\n        }\n        return extended;\n    };\n    /**\n     * Returns a function which can sort ranges based on the options in this\n     * instance. Comparison is first done by class, and followed by type.\n     */\n    Sort.prototype.getSorter = function () {\n        var _this = this;\n        return function (a, b) {\n            var d = _this.getClassComparison(a, b);\n            if (d === 0) {\n                switch (_this.type) {\n                    case SortType.MIN:\n                        d = _this.getMinComparison(a, b);\n                        break;\n                    case SortType.MAX:\n                        d = _this.getMaxComparison(a, b);\n                        break;\n                    case SortType.AVERAGE:\n                        d = _this.getAverageComparison(a, b);\n                        break;\n                }\n            }\n            return _this.ascending ? d : -d;\n        };\n    };\n    /**\n     * A sort function between two ranges which look at the range minimums.\n     *\n     * @param a The first range.\n     * @param b The second range.\n     * @see [[Sorter]]\n     */\n    Sort.prototype.getMinComparison = function (a, b) {\n        return fn.sign(a.min.classScaled - b.min.classScaled);\n    };\n    /**\n     * A sort function between two ranges which look at the range maximums.\n     *\n     * @param a The first range.\n     * @param b The second range.\n     * @see [[Sorter]]\n     */\n    Sort.prototype.getMaxComparison = function (a, b) {\n        return fn.sign(a.max.classScaled - b.max.classScaled);\n    };\n    /**\n     * A sort function between two ranges which look at the range averages.\n     *\n     * @param a The first range.\n     * @param b The second range.\n     * @see [[Sorter]]\n     */\n    Sort.prototype.getAverageComparison = function (a, b) {\n        var avg = (a.min.classScaled + a.max.classScaled) * 0.5;\n        var bvg = (b.min.classScaled + b.max.classScaled) * 0.5;\n        return fn.sign(avg - bvg);\n    };\n    /**\n     * A sort function between two ranges which look at the range classes.\n     *\n     * @param a The first range.\n     * @param b The second range.\n     * @see [[Sorter]]\n     */\n    Sort.prototype.getClassComparison = function (a, b) {\n        var ag = a.min.group ? 1 : -1;\n        var bg = b.min.group ? 1 : -1;\n        if (ag !== bg) {\n            return ag - bg;\n        }\n        var ac = this.classes[a.min.group.parent.name] || 0;\n        var bc = this.classes[b.min.group.parent.name] || 0;\n        return ac - bc;\n    };\n    return Sort;\n}());\nexport { Sort };\n//# sourceMappingURL=Sort.js.map","\"use strict\";\nimport { Plurality } from './Plurality';\nimport { System } from './System';\nimport { Class } from './Class';\nimport { Output } from './Output';\nimport { Transform } from './Transform';\nimport { Sort } from './Sort';\n/**\n * The global class which keeps track of all unit mappings and global options.\n *\n * This class is also responsible for creating dynamic classes and groups based\n * on approximation when a desired unit is not defined by the developer.\n */\nvar Core = (function () {\n    function Core() {\n    }\n    /**\n     * Returns a [[Group]] instance mapped by the given unit. If no unit is given\n     * `null` is returned. If the unit isn't mapped to a group a dynamic group\n     * match is looked at and if none are found and `createDynamic` is true a new\n     * dynamic group is created.\n     *\n     * @param unit The unit of the group to get.\n     * @param createDynamic If creating a dynamic group should be created if an\n     *  existing group could not be found.\n     * @return The group matched to the unit or null if none was found.\n     * @see [[Core.getDynamicMatch]]\n     * @see [[Core.addDynamicUnit]]\n     * @see [[Core.newDynamicGroup]]\n     */\n    Core.getGroup = function (unit, createDynamic) {\n        if (createDynamic === void 0) { createDynamic = true; }\n        if (!unit) {\n            return null;\n        }\n        var exactGroup = Core.unitToGroup[unit];\n        if (exactGroup) {\n            return exactGroup;\n        }\n        var normalizedUnit = unit.toLowerCase();\n        var normalizedGroup = Core.unitToGroup[normalizedUnit];\n        if (normalizedGroup) {\n            return normalizedGroup;\n        }\n        if (!createDynamic) {\n            return null;\n        }\n        var dynamicUnit = Core.getDynamicMatch(unit);\n        var dynamicGroup = Core.dynamicMatches[dynamicUnit];\n        if (dynamicGroup) {\n            return Core.addDynamicUnit(unit, dynamicGroup);\n        }\n        return Core.newDynamicGroup(unit);\n    };\n    /**\n     * Sets the given unit as the preferred unit for the group it belongs to. If a\n     * group is not found then this has no affect.\n     *\n     * @param unit The unit to mark as the preferred unit.\n     * @see [[Core.getGroup]]\n     */\n    Core.setPreferred = function (unit) {\n        var group = this.getGroup(unit, false);\n        if (group) {\n            group.setPreferred(unit);\n        }\n    };\n    /**\n     * Sets whether the group associated with the given unit is common. A common\n     * group is one a user is familiar with and would be okay seeing values\n     * represented in. If a group is not found then this has no affect.\n     *\n     * @param unit The unit of a group to set the common flag.\n     * @param common Whether the associated group should be common.\n     * @see [[Core.getGroup]]\n     */\n    Core.setCommon = function (unit, common) {\n        if (common === void 0) { common = true; }\n        var group = this.getGroup(unit, false);\n        if (group) {\n            group.setCommon(common);\n        }\n    };\n    /**\n     * Sets the denominators for the group associated to the given unit.\n     * Denominators are useful for calculating a fraction from a value.\n     *\n     * @param unit The unit of a group to set the denominators of.\n     * @param denominators The new denominators for the group.\n     * @see [[Core.getGroup]]\n     */\n    Core.setDenominators = function (unit, denominators) {\n        var group = this.getGroup(unit, false);\n        if (group) {\n            group.setDenominators(denominators);\n        }\n    };\n    /**\n     * Adds the given class and all groups and units to the global state. If there\n     * are units mapped to other groups they are overwritten by the units in the\n     * given class.\n     *\n     * @param parent The class to add to the global state.\n     */\n    Core.addClass = function (parent) {\n        this.classMap[parent.name] = parent;\n        this.classes.push(parent);\n        var groups = parent.groupMap;\n        for (var unit in groups) {\n            this.unitToGroup[unit] = groups[unit];\n        }\n    };\n    /**\n     * Adds an array of classes to the global state.\n     *\n     * @see [[Core.addClass]]\n     */\n    Core.addClasses = function () {\n        var classes = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            classes[_i] = arguments[_i];\n        }\n        for (var i = 0; i < classes.length; i++) {\n            this.addClass(classes[i]);\n        }\n    };\n    /**\n     * Adds the unit to the given dynamic group. This function also updates the\n     * plurality of all the units currently in the group.\n     *\n     * @param unit The unit to add to the given group.\n     * @param group The dynamically created group.\n     * @return The instance of the given group.\n     */\n    Core.addDynamicUnit = function (unit, group) {\n        group.units[unit] = Plurality.EITHER;\n        var unitCount = 0;\n        for (var groupUnit in group.units) {\n            if (groupUnit) {\n                unitCount++;\n            }\n        }\n        if (unitCount > 1) {\n            var longest = void 0;\n            for (var groupUnit in group.units) {\n                group.units[groupUnit] = Plurality.SINGULAR;\n                if (!longest || groupUnit.length > longest.length) {\n                    longest = groupUnit;\n                }\n            }\n            if (longest) {\n                group.units[longest] = Plurality.PLURAL;\n            }\n        }\n        group.updateUnits();\n        this.unitToGroup[unit] = group;\n        this.unitToGroup[unit.toLowerCase()] = group;\n        this.dynamicMatches[this.getDynamicMatch(unit)] = group;\n        return group;\n    };\n    /**\n     * Creates a dynamic class & group based on the given unit and adds it to the\n     * global state. By default the group is marked with [[System.ANY]], is\n     * common, and has the valid denominators 2, 3, 4, 5, 6, 8, 10.\n     *\n     * @param unit The initial unit of the group to use as the name of the class\n     *  and the base unit of the group.\n     * @return An instance of a new Group with a new parent Class.\n     */\n    Core.newDynamicGroup = function (unit) {\n        var parent = new Class(unit);\n        var group = parent.addGroup({\n            system: System.ANY,\n            unit: unit,\n            common: true,\n            baseUnit: unit,\n            denominators: [2, 3, 4, 5, 6, 8, 10],\n            units: {}\n        });\n        group.setDynamic();\n        this.addDynamicUnit(unit, group);\n        this.dynamicGroups.push(group);\n        return group;\n    };\n    /**\n     * The function which takes a unit and generates a string which should be used\n     * to mark similarly spelled units under the same dynamic group.\n     *\n     * @param unit The unit to build a key from.\n     * @return The key which identifies the dynamic group.\n     */\n    Core.getDynamicMatch = function (unit) {\n        return unit.substring(0, this.dynamicMatchLength).toLowerCase();\n    };\n    /**\n     * The function which takes to values and determines which one is more\n     * \"normal\" or \"human friendly\".\n     *\n     * @param fromValue The most normal value found so far.\n     * @param toValue The value to compare to.\n     * @param transform The transformation rules to guide the function to choose\n     *  the more normal value.\n     * @param forOutput The output options to guide the function to choose the\n     *  more normal value.\n     * @return True if `toValue` appears more normal than `fromValue`.\n     */\n    // @ts-ignore\n    Core.isMoreNormal = function (fromValue, toValue, transform, forOutput) {\n        var fromString = forOutput.value(fromValue);\n        var toString = forOutput.value(toValue);\n        return toString.length <= fromString.length;\n    };\n    /**\n     * The map of defined classes by their name.\n     */\n    Core.classMap = {};\n    /**\n     * An array of the defined classes.\n     */\n    Core.classes = [];\n    /**\n     * A map of groups by their acceptable units.\n     */\n    Core.unitToGroup = {};\n    /**\n     * A list of dynamically created groups based on units specified by a user\n     * which are not defined by the developer.\n     */\n    Core.dynamicGroups = [];\n    /**\n     * A map of the dynamically created groups by a key determined by\n     * [[Core.getDynamicMatch]].\n     */\n    Core.dynamicMatches = {};\n    /**\n     * Dynamic groups are mapped together (by default) by looking at the first few\n     * characters.\n     *\n     * @see [[Core.getDynamicMatch]]\n     */\n    Core.dynamicMatchLength = 3;\n    /**\n     * The global options used for outputting [[Base]], [[Range]], and [[Value]]s\n     * which may be overridden by specifying any number of options.\n     *\n     * @see [[Base.output]]\n     * @see [[Range.output]]\n     * @see [[Value.output]]\n     */\n    Core.globalOutput = new Output();\n    /**\n     * The global transform options used for transforming a [[Base]] instance\n     * by specifying what sort of units/groups are visible to the user.\n     *\n     * @see [[Base.normalize]]\n     * @see [[Base.compact]]\n     * @see [[Base.expand]]\n     * @see [[Base.conversions]]\n     * @see [[Base.filter]]\n     */\n    Core.globalTransform = new Transform();\n    /**\n     * The global sort options used for ordering ranges in a [[Base]] instance.\n     *\n     * @see [[Base.sort]]\n     */\n    Core.globalSort = new Sort();\n    return Core;\n}());\nexport { Core };\n//# sourceMappingURL=Core.js.map","\"use strict\";\nimport { Functions as fn } from './Functions';\nimport { Core } from './Core';\n/**\n * A class which contains a parsed number or fraction.\n */\nvar Value = (function () {\n    /**\n     * Creates a new instance of Value given the value, possible numerator and\n     * denominator, and the unit and it's group.\n     *\n     * @param value [[Value.value]]\n     * @param num [[Value.num]]\n     * @param den [[Value.den]]\n     * @param unit [[Value.unit]]\n     * @param group [[Value.group]]\n     */\n    function Value(value, num, den, unit, group, rate, rateGroup) {\n        var divisor = fn.gcd(num, den);\n        this.value = value;\n        this.num = num / divisor;\n        this.den = den / divisor;\n        this.unit = unit;\n        this.group = group;\n        this.rate = rate;\n        this.rateGroup = rateGroup;\n    }\n    Object.defineProperty(Value.prototype, \"isValid\", {\n        /**\n         * Returns true if this value was successfully parsed from some input.\n         */\n        get: function () {\n            return isFinite(this.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Value.prototype, \"isFraction\", {\n        /**\n         * Returns true if this value is a fraction with a numerator and denoninator.\n         */\n        get: function () {\n            return this.den !== 1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Value.prototype, \"isDecimal\", {\n        /**\n         * Returns true if this value is a number and not a fraction.\n         */\n        get: function () {\n            return this.den === 1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Value.prototype, \"isZero\", {\n        /**\n         * Returns true if this value is zero.\n         */\n        get: function () {\n            return fn.isZero(this.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Value.prototype, \"isSingular\", {\n        /**\n         * Returns true if this value is singular.\n         *\n         * @see [[Functions.isSingular]]\n         */\n        get: function () {\n            return fn.isSingular(this.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Value.prototype, \"isRate\", {\n        /**\n         * Returns true if this value is a rate.\n         */\n        get: function () {\n            return !!this.rate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Value.prototype, \"scaled\", {\n        /**\n         * Returns the number of this value relative to the base unit.\n         */\n        get: function () {\n            return this.group ? this.value * this.group.baseScale : this.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Value.prototype, \"classScaled\", {\n        /**\n         * Returns the number of this value relative to the first base unit of it's\n         * class.\n         */\n        get: function () {\n            return this.group ? this.value * this.group.classScale : this.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Value.prototype, \"calculated\", {\n        /**\n         * Returns the number which represents the fraction in the value. There may\n         * be a difference between this value and the number when the fraction is\n         * calculated from the denominators of the group.\n         */\n        get: function () {\n            return this.num / this.den;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Value.prototype, \"mixedWhole\", {\n        /**\n         * Returns the whole number for the mixed fraction of this value. If this\n         * value is not a fraction 0 is returned.\n         */\n        get: function () {\n            return this.den !== 1 ? Math.floor(this.num / this.den) : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Value.prototype, \"mixedNum\", {\n        /**\n         * Returns the numerator for the mixed fraction of this value. If this value\n         * is not a fraction then the numerator is returned.\n         */\n        get: function () {\n            return this.den !== 1 ? this.num % this.den : this.num;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Value.prototype, \"floor\", {\n        /**\n         * Returns the floor of the number in this value.\n         */\n        get: function () {\n            return Math.floor(this.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Value.prototype, \"ceil\", {\n        /**\n         * Returns the ceiling of the number in this value.\n         */\n        get: function () {\n            return Math.ceil(this.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Value.prototype, \"truncate\", {\n        /**\n         * Returns the truncated number in this value taking into account it's sign.\n         */\n        get: function () {\n            return this.value < 0 ? this.ceil : this.floor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Value.prototype, \"remainder\", {\n        /**\n         * Returns the fractional part of the number in this value.\n         */\n        get: function () {\n            return this.value - this.floor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Value.prototype, \"error\", {\n        /**\n         * Returns the signed distance the number of this value is from the fraction\n         * numerator and denominator determined. If this value is not a fraction then\n         * this should return zero.\n         */\n        get: function () {\n            return this.calculated - this.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Value.prototype, \"distance\", {\n        /**\n         * Returns the absolute distance the number of this value is from the fraction\n         * numerator and denominator determined. If this value is not a fraction then\n         * this should return zero.\n         */\n        get: function () {\n            return fn.abs(this.error);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Calculates the scale necessary to switch this value from the current rate\n     * to the provided rate.\n     *\n     * @param rate The rate group.\n     * @return The calculated scale.\n     */\n    Value.prototype.getRateScale = function (rate) {\n        return rate ? rate.parent.convert(1, rate, this.rateGroup, 1) : 1;\n    };\n    /**\n     * Determines whether the given value is compatible with this value to perform\n     * operations with.\n     *\n     * @param other The value to test against.\n     * @return True if the given value has compatible unit and rate groups.\n     */\n    Value.prototype.isMatch = function (other) {\n        var group = this.group;\n        var groupOther = other.group;\n        var groupMatch = groupOther === group || (groupOther && group && groupOther.parent === group.parent);\n        if (!groupMatch) {\n            return false;\n        }\n        var rate = this.rateGroup;\n        var rateOther = other.rateGroup;\n        var rateMatch = rateOther === rate || (rateOther && rate && rateOther.parent === rate.parent);\n        return rateMatch;\n    };\n    /**\n     * Returns a version of this value with the preferred unit.\n     *\n     * @return A new value or the reference to this instance if it's groupless.\n     * @see [[Group.preferredUnit]]\n     */\n    Value.prototype.preferred = function () {\n        return this.group ? new Value(this.value, this.num, this.den, this.group.preferredUnit, this.group, this.rateGroup ? this.rateGroup.preferredUnit : this.rate, this.rateGroup) : this;\n    };\n    /**\n     * Returns a copy of this value.\n     *\n     * @return A new value.\n     */\n    Value.prototype.copy = function () {\n        return new Value(this.value, this.num, this.den, this.unit, this.group, this.rate, this.rateGroup);\n    };\n    /**\n     * Returns a value equivalent to zero with the unt and group of this instance.\n     *\n     * @return A new value.\n     */\n    Value.prototype.zero = function () {\n        return new Value(0, 0, 1, this.unit, this.group, this.rate, this.rateGroup);\n    };\n    /**\n     * Returns the truncated version of this value. That's a value where the\n     * number is a whole number.\n     *\n     * @return A new value.\n     */\n    Value.prototype.truncated = function () {\n        return new Value(this.truncate, this.truncate, 1, this.unit, this.group, this.rate, this.rateGroup);\n    };\n    /**\n     * Returns a version of this value as a fraction.\n     *\n     * @return A new value or the reference to this instance if it's a fraction.\n     */\n    Value.prototype.fractioned = function () {\n        if (this.isFraction) {\n            return this;\n        }\n        if (this.group) {\n            return Value.fromNumberWithDenominators(this.value, this.group.denominators, this.unit, this.group, this.rate, this.rateGroup);\n        }\n        return this;\n    };\n    /**\n     * Returns a version of this value as a number.\n     *\n     * @return A new value or the reference to this instance if it's a number.\n     */\n    Value.prototype.numbered = function () {\n        if (this.isFraction) {\n            return new Value(this.value, this.value, 1, this.unit, this.group, this.rate, this.rateGroup);\n        }\n        return this;\n    };\n    /**\n     * Converts this value to the given group and returns the result.\n     *\n     * @param to The group to convert to.\n     * @param rate The group for the rate.\n     * @return The converted value or the number of this value if there's no group.\n     */\n    Value.prototype.convertTo = function (to, rate) {\n        if (rate === void 0) { rate = null; }\n        var group = this.group;\n        var rateScale = this.getRateScale(rate);\n        var value = this.value * rateScale;\n        return group ? group.parent.convert(value, group, to) : value;\n    };\n    /**\n     * Converts this value to the given group and returns a new value. The new\n     * value will attempted to be converted to a fraction.\n     *\n     * @param group The group to convert to.\n     * @param rate The group for the rate.\n     * @return A new value.\n     */\n    Value.prototype.convertToValue = function (group, rate) {\n        if (rate === void 0) { rate = null; }\n        return Value.fromNumberForGroup(this.convertTo(group, rate), group, rate || this.rateGroup);\n    };\n    /**\n     * Determines the available conversions of this value for all groups\n     * that are valid for the given transform.\n     *\n     * @param transform Transform which controls the units and values acceptable.\n     * @param reverse Whether to iterate from largest units to smallest units\n     *  (`true`), or from smallest to largest (`false`).\n     * @param callback The function to invoke for each valid conversion.\n     * @param callback.transformed The conversion calculated.\n     * @param callback.index The index of the conversion during iteration.\n     * @see [[Group.matches]]\n     */\n    Value.prototype.conversions = function (transform, reverse, callback) {\n        var _this = this;\n        var unitGroup = this.group;\n        var rateGroup = this.rateGroup;\n        var convertUnit = unitGroup && transform.convertUnit;\n        var convertRate = rateGroup && transform.convertRate;\n        var index = 0;\n        if (convertUnit && convertRate) {\n            rateGroup.matches(transform, reverse, function (rate) {\n                unitGroup.matches(transform, reverse, function (group) {\n                    callback(_this.convertToValue(group, rate), index++);\n                });\n            });\n        }\n        else if (convertUnit) {\n            unitGroup.matches(transform, reverse, function (group) {\n                callback(_this.convertToValue(group), index++);\n            });\n        }\n        else if (convertRate) {\n            rateGroup.matches(transform, reverse, function (rate) {\n                callback(_this.convertToValue(unitGroup, rate), index++);\n            });\n        }\n    };\n    /**\n     * Returns a value based on this value with the unit that best represents the\n     * value. What is best is typically related to the magnitude of the value.\n     * Really small and really large values are harder for people to comprehend so\n     * the unit which results in the most normal looking value is determined.\n     *\n     * @param transform Transform which controls the units and values acceptable.\n     * @param forOutput The output that may be used so the most normal looking\n     *  value can be determined.\n     * @return The most normal value found.\n     * @see [[Value.conversions]]\n     * @see [[Core.isMoreNormal]]\n     */\n    Value.prototype.normalize = function (transform, forOutput) {\n        var closest;\n        this.conversions(transform, false, function (convert) {\n            var acceptable = !forOutput.isNumber(convert);\n            if (!acceptable) {\n                var number = forOutput.number(convert.value);\n                acceptable = number !== '0';\n            }\n            if (acceptable) {\n                if (!closest || Core.isMoreNormal(closest, convert, transform, forOutput)) {\n                    closest = convert;\n                }\n            }\n        });\n        return closest || this;\n    };\n    /**\n     * Calculates the sum of this value and the given addend scaled by some\n     * factor. This is equivalent to `result = this + (addend * scale)`.\n     *\n     * @param addend The value to add to this.\n     * @param scale The factor to scale the addend by before adding it to this.\n     * @return A new instance.\n     */\n    Value.prototype.add = function (addend, scale) {\n        if (scale === void 0) { scale = 1; }\n        var rateScale = this.getRateScale(addend.rateGroup);\n        var totalScale = rateScale * scale;\n        var num = this.num * addend.den + addend.num * this.den * totalScale;\n        var den = this.den * addend.den;\n        var result = this.value + addend.value * totalScale;\n        return new Value(result, num, den, this.unit, this.group, this.rate, this.rateGroup);\n    };\n    /**\n     * Calculates the difference between this value and the subtrahend scaled by\n     * some factor. This is equivalent to `result = this - (subtrahend * scale)`.\n     *\n     * @param subtrahend The value to subtract from this.\n     * @param scale The factor to scale the subtrahend by before subtraction.\n     * @return A new instance.\n     */\n    Value.prototype.sub = function (subtrahend, scale) {\n        if (scale === void 0) { scale = 1; }\n        var rateScale = this.getRateScale(subtrahend.rateGroup);\n        var totalScale = rateScale * scale;\n        var num = this.num * subtrahend.den - subtrahend.num * this.den * totalScale;\n        var den = this.den * subtrahend.den;\n        var result = this.value - subtrahend.value * totalScale;\n        return new Value(result, num, den, this.unit, this.group, this.rate, this.rateGroup);\n    };\n    /**\n     * Calculates a new value by multiplying this by a given factor. This is\n     * equivalent to `result = this * scale`.\n     *\n     * @param scale The factor to scale this instance by.\n     * @return A new instance.\n     */\n    Value.prototype.scale = function (scale) {\n        return new Value(this.value * scale, this.num * scale, this.den, this.unit, this.group, this.rate, this.rateGroup);\n    };\n    /**\n     * Calculates a new value by multiplying this by a given value. This is\n     * equivalent to `result = this * scale`.\n     *\n     * @param scale The value to scale this instance by.\n     * @return A new instance.\n     */\n    Value.prototype.mul = function (scale) {\n        var rateScale = this.getRateScale(scale.rateGroup);\n        var num = this.num * scale.num * rateScale;\n        var den = this.den * scale.den;\n        var result = this.value * scale.value * rateScale;\n        return new Value(result, num, den, this.unit, this.group, this.rate, this.rateGroup);\n    };\n    /**\n     * Converts this value to a string with the given output options taking into\n     * account the global options.\n     *\n     * @param options The options to override the global output options.\n     * @return The string representation of this instance.\n     * @see [[Output]]\n     */\n    Value.prototype.output = function (options) {\n        var output = Core.globalOutput.extend(options);\n        return output.value(this);\n    };\n    /**\n     * Returns the units of this value as a string based on the global output\n     * options.\n     *\n     * @param options The options to override the global output options.\n     * @return The string representation of the units of this value.\n     * @see [[Output]]\n     */\n    Value.prototype.units = function (options) {\n        var output = Core.globalOutput.extend(options);\n        return output.units(this);\n    };\n    /**\n     * Returns a Value instance which is a number with the optional unit and group.\n     *\n     * @param value The number.\n     * @param unit The unit, if any, of the number.\n     * @param group The group which matches the unit.\n     * @return A new instance.\n     */\n    Value.fromNumber = function (value, unit, group, rate, rateGroup) {\n        if (unit === void 0) { unit = ''; }\n        if (group === void 0) { group = null; }\n        if (rate === void 0) { rate = ''; }\n        if (rateGroup === void 0) { rateGroup = null; }\n        return new Value(value, value, 1, unit, group, rate, rateGroup);\n    };\n    /**\n     * Returns a Value instance which tries to be a fraction given a range of\n     * denominators. If the number is already whole or a fraction close\n     * enough to the number cannot be found a value which is a number is returned.\n     *\n     * @param value The number to try to find a fraction for.\n     * @param unit The unit, if any, of the number.\n     * @param group The group which matches the unit.\n     * @param minDen The starting denominator to inclusively try.\n     * @param maxDen The last denominator to inclusively try.\n     * @return A new instance.\n     */\n    Value.fromNumberWithRange = function (value, unit, group, minDen, maxDen, rate, rateGroup) {\n        if (unit === void 0) { unit = ''; }\n        if (group === void 0) { group = null; }\n        if (minDen === void 0) { minDen = 1; }\n        if (maxDen === void 0) { maxDen = 100; }\n        if (rate === void 0) { rate = ''; }\n        if (rateGroup === void 0) { rateGroup = null; }\n        var closestDenominator = 0;\n        var closestDistance = -1;\n        for (var i = minDen; i <= maxDen; i++) {\n            var den = i;\n            var num = Math.floor(den * value);\n            var actual = num / den;\n            var distance = fn.abs(value - actual);\n            if (closestDistance === -1 || distance < closestDistance) {\n                closestDistance = distance;\n                closestDenominator = den;\n            }\n        }\n        if (closestDistance > fn.EPSILON) {\n            return new Value(value, value, 1, unit, group, rate, rateGroup);\n        }\n        if (closestDenominator === 0) {\n            closestDenominator = 1;\n        }\n        return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group, rate, rateGroup);\n    };\n    /**\n     * Returns a Value instance which tries to be a fraction based on the\n     * denominators of the group. If a valid fraction could not be found then the\n     * instance returned will be a number value. Since a unit is not passed here,\n     * the preferred unit of the group is used as the unit of the value.\n     *\n     * @param value The number to try to find a fraction for.\n     * @param group The group for the unit and also the denominators to try.\n     * @param rateGroup The group for the rate.\n     * @return A new instance.\n     */\n    Value.fromNumberForGroup = function (value, group, rateGroup) {\n        return this.fromNumberWithDenominators(value, group.denominators, group.preferredUnit, group, rateGroup ? rateGroup.preferredUnit : '', rateGroup);\n    };\n    /**\n     * Returns a Value instance which tries to be a fraction based on the\n     * denominators of the group. If a valid fraction could not be found then the\n     * instance returned will be a number value.\n     *\n     * @param value The number to try to find a fraction for.\n     * @param denominators The array of denominators to try.\n     * @param unit The unit, if any, of the number.\n     * @param group The group which matches the unit.\n     * @return A new instance.\n     */\n    Value.fromNumberWithDenominators = function (value, denominators, unit, group, rate, rateGroup) {\n        if (unit === void 0) { unit = ''; }\n        if (group === void 0) { group = null; }\n        if (rate === void 0) { rate = ''; }\n        if (rateGroup === void 0) { rateGroup = null; }\n        var closestDenominator = 0;\n        var closestDistance = -1;\n        for (var i = 0; i < denominators.length; i++) {\n            var den = denominators[i];\n            var num = Math.floor(den * value);\n            var actual = num / den;\n            var distance = fn.abs(value - actual);\n            if (closestDistance === -1 || distance < closestDistance) {\n                closestDistance = distance;\n                closestDenominator = den;\n            }\n        }\n        if (closestDistance > fn.EPSILON) {\n            return new Value(value, value, 1, unit, group, rate, rateGroup);\n        }\n        if (closestDenominator === 0) {\n            closestDenominator = 1;\n        }\n        return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group, rate, rateGroup);\n    };\n    /**\n     * Returns a Value instance for a given fraction specified by a numerator and\n     * denominator.\n     *\n     * @param num The numerator of the fraction.\n     * @param den The denominator of the fraction.\n     * @param unit The unit, if any, of the fraction.\n     * @param group The group which matches the unit.\n     * @return A new instance.\n     */\n    Value.fromFraction = function (num, den, unit, group, rate, rateGroup) {\n        if (unit === void 0) { unit = ''; }\n        if (group === void 0) { group = null; }\n        if (rate === void 0) { rate = ''; }\n        if (rateGroup === void 0) { rateGroup = null; }\n        return new Value(num / den, num, den, unit, group, rate, rateGroup);\n    };\n    /**\n     * A value instance which contains invalid numbers.\n     */\n    Value.INVALID = new Value(Number.NaN, Number.NaN, 1, '', null, '', null);\n    return Value;\n}());\nexport { Value };\n//# sourceMappingURL=Value.js.map","\"use strict\";\nimport { Functions as fn } from './Functions';\nimport { Value } from './Value';\nimport { Core } from './Core';\n/**\n * A pair of minimum and maximum values. A range can be fixed which means the\n * minimum and maximum are equivalent - in which case the range behaves like\n * a [[Value]].\n */\nvar Range = (function () {\n    /**\n     * Creates a new instance of Range given the minimum and maximum values.\n     *\n     * @param min The minimum value for the range.\n     * @param max The maximum value for the range.\n     */\n    function Range(min, max) {\n        this.min = min.value < max.value ? min : max;\n        this.max = max.value > min.value ? max : min;\n    }\n    Object.defineProperty(Range.prototype, \"isValid\", {\n        /**\n         * True if the min and max are both valid.\n         */\n        get: function () {\n            return this.min.isValid && this.max.isValid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Range.prototype, \"isFraction\", {\n        /**\n         * True if the min or max are a fraction.\n         */\n        get: function () {\n            return this.min.isFraction || this.max.isFraction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Range.prototype, \"isDecimal\", {\n        /**\n         * True if the min and max are decimal.\n         */\n        get: function () {\n            return this.min.isDecimal && this.max.isDecimal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Range.prototype, \"isRange\", {\n        /**\n         * True if the min and max are not the same value.\n         */\n        get: function () {\n            return this.min.value !== this.max.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Range.prototype, \"isFixed\", {\n        /**\n         * True if the min and max are the same value.\n         */\n        get: function () {\n            return this.min.value === this.max.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Range.prototype, \"isZero\", {\n        /**\n         * True if the min and max are both equal to zero.\n         */\n        get: function () {\n            return this.min.isZero && this.max.isZero;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Range.prototype, \"isSingular\", {\n        /**\n         * True if the min and max are both singular (1 or -1).\n         */\n        get: function () {\n            return this.min.isSingular && this.max.isSingular;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Range.prototype, \"isRate\", {\n        /**\n         * True if one of min and max are rates.\n         */\n        get: function () {\n            return this.min.isRate && this.max.isRate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Range.prototype, \"average\", {\n        /**\n         * The average number between the min and max.\n         */\n        get: function () {\n            return (this.min.value + this.max.value) * 0.5;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Range.prototype, \"value\", {\n        /**\n         * The minimum value of this range.\n         */\n        get: function () {\n            return this.min.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Range.prototype, \"minimum\", {\n        /**\n         * The minimum value of this range.\n         */\n        get: function () {\n            return this.min.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Range.prototype, \"maximum\", {\n        /**\n         * The maximum value of this range.\n         */\n        get: function () {\n            return this.max.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Range.prototype, \"unit\", {\n        /**\n         * The unit which identifies the group of the minimum value or `null` if the\n         * minimum value does not have a group.\n         */\n        get: function () {\n            return this.min.group ? this.min.group.unit : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Determines if the given range matches this range enough to allow a\n     * simple mathematical operation between the two ranges.\n     *\n     * @param range The range to test.\n     * @return True if the groups of the given range match this range.\n     */\n    Range.prototype.isExactMatch = function (range) {\n        return this.min.group === range.min.group &&\n            this.max.group === range.max.group &&\n            this.min.rateGroup === range.min.rateGroup &&\n            this.max.rateGroup === range.max.rateGroup;\n    };\n    /**\n     * Determines if the given range matches this range enough to allow a\n     * complex mathematical operation between the two ranges.\n     *\n     * @param min The minimum of the range to test.\n     * @param max The maximum of the range to test.\n     * @return True if the min and max have compatible values.\n     */\n    Range.prototype.isMatch = function (min, max) {\n        return this.min.isMatch(min) && this.max.isMatch(max);\n    };\n    /**\n     * @return A range which has the min and max converted to their preferred units.\n     * @see [[Value.preferred]]\n     */\n    Range.prototype.preferred = function () {\n        var min = this.min.preferred();\n        var max = this.max.preferred();\n        return new Range(min, max);\n    };\n    /**\n     * @return A range which has only positive values. If the range is entirely\n     *  negative then `null` is returned.\n     */\n    Range.prototype.positive = function () {\n        var minNegative = this.min.value < 0;\n        var maxNegative = this.max.value < 0;\n        if (maxNegative) {\n            return null;\n        }\n        var min = minNegative ? this.min.zero() : this.min.copy();\n        var max = this.max.copy();\n        return new Range(min, max);\n    };\n    /**\n     * @return A range which has only negative values. If the range is entirely\n     *  positive then `null` is returned.\n     */\n    Range.prototype.negative = function () {\n        var minPositive = this.min.value >= 0;\n        var maxPositive = this.max.value >= 0;\n        if (minPositive) {\n            return null;\n        }\n        var min = this.min.copy();\n        var max = maxPositive ? this.max.zero() : this.max.copy();\n        return new Range(min, max);\n    };\n    /**\n     * @return A range which has a non-zero min and max. If both are equial to\n     *  zero then `null` is returned.\n     */\n    Range.prototype.nonzero = function () {\n        var minZero = fn.isZero(this.min.value);\n        var maxZero = fn.isZero(this.max.value);\n        if (minZero && maxZero) {\n            return null;\n        }\n        var min = this.min.copy();\n        var max = this.max.copy();\n        return new Range(min, max);\n    };\n    /**\n     * @return A range with only the maximum value from this range.\n     */\n    Range.prototype.maxd = function () {\n        var fixed = this.max.copy();\n        return new Range(fixed, fixed);\n    };\n    /**\n     * @return A range with only the minimum value from this range.\n     */\n    Range.prototype.mind = function () {\n        var fixed = this.min.copy();\n        return new Range(fixed, fixed);\n    };\n    /**\n     * Creates a range with with units that best represent the values. This may\n     * cause the minimum and maximum values to have different units.\n     *\n     * @param transform Options to control which units and values are acceptable.\n     * @param forOutput The output options that should be used to determine which\n     *  value & unit is best.\n     * @return A new range.\n     * @see [[Value.normalize]]\n     */\n    Range.prototype.normalize = function (transform, forOutput) {\n        var min = this.min.normalize(transform, forOutput);\n        var max = this.max.normalize(transform, forOutput);\n        return new Range(min, max);\n    };\n    /**\n     * Adds this range and a given range (optionally scaled by a factor) together.\n     *\n     * @param addend The range to add to this instance.\n     * @param scale The factor to multiply the addend by when added it to this\n     *  instance.\n     * @return a new range.\n     * @see [[Value.add]]\n     */\n    Range.prototype.add = function (addend, scale) {\n        if (scale === void 0) { scale = 1; }\n        var min = this.min.add(addend.min, scale);\n        var max = this.max.add(addend.max, scale);\n        return new Range(min, max);\n    };\n    /**\n     * Subtracts a given range (optionally scaled by a factor) from this range.\n     *\n     * @param subtrahend The range to remove from this instance.\n     * @param scale The factor to multiply the subtrahend by when subtracting it\n     *  from this instance.\n     * @return A new range.\n     * @see [[Value.sub]]\n     */\n    Range.prototype.sub = function (subtrahend, scale) {\n        if (scale === void 0) { scale = 1; }\n        var min = this.min.sub(subtrahend.min, scale);\n        var max = this.max.sub(subtrahend.max, scale);\n        return new Range(min, max);\n    };\n    /**\n     * Multiplies this range by a scalar factor.\n     *\n     * @param scale The amount to multiply the range by.\n     * @return A new range.\n     * @see [[Value.scale]]\n     */\n    Range.prototype.scale = function (scale) {\n        var min = this.min.scale(scale);\n        var max = this.max.scale(scale);\n        return new Range(min, max);\n    };\n    /**\n     * Multiplies this range by a scale value.\n     *\n     * @param scale The amount to multiply the range by.\n     * @return A new range.\n     * @see [[Value.mul]]\n     */\n    Range.prototype.mul = function (scale) {\n        var min = this.min.mul(scale);\n        var max = this.max.mul(scale);\n        return new Range(min, max);\n    };\n    /**\n     * Returns a range which is coerced into being represented by fractions if a\n     * valid fraction can be determined from the units valid denominators.\n     *\n     * @return A new range if the minimum and maximum are not fractions, otherwise\n     *  the reference to this range is returned.\n     * @see [[Value.fractioned]]\n     */\n    Range.prototype.fractioned = function () {\n        if (this.min.isFraction && this.max.isFraction) {\n            return this;\n        }\n        var min = this.min.fractioned();\n        var max = this.max.fractioned();\n        return new Range(min, max);\n    };\n    /**\n     * Returns a range which has any fraction values converted to numbers.\n     *\n     * @return A new range if the mimimum or maximum are fractions, otherwise the\n     *  the reference to this range is returned.\n     * @see [[Value.numbered]]\n     */\n    Range.prototype.numbered = function () {\n        if (!this.min.isFraction && !this.max.isFraction) {\n            return this;\n        }\n        var min = this.min.numbered();\n        var max = this.max.numbered();\n        return new Range(min, max);\n    };\n    /**\n     * Converts this range to a string with the given output options taking into\n     * account the global options.\n     *\n     * @param options The options to override the global output options.\n     * @return The string representation of this instance.\n     * @see [[Output]]\n     */\n    Range.prototype.output = function (options) {\n        var output = Core.globalOutput.extend(options);\n        return output.range(this);\n    };\n    /**\n     * Creates a fixed range from a given value. A fixed range behaves essentially\n     * as a value since the minimum and maximum are equivalent.\n     *\n     * @param fixed The value to be used as the min and max of the range.\n     * @return A new fixed range.\n     */\n    Range.fromFixed = function (fixed) {\n        return new Range(fixed, fixed);\n    };\n    /**\n     * A range instance which contains invalid values.\n     */\n    Range.INVALID = new Range(Value.INVALID, Value.INVALID);\n    return Range;\n}());\nexport { Range };\n//# sourceMappingURL=Range.js.map","\"use strict\";\nimport { Functions as fn } from './Functions';\nimport { Core } from './Core';\nimport { Parse } from './Parse';\nimport { Range } from './Range';\nimport { Value } from './Value';\n/**\n * Takes user input and returns a new instance of [Base].\n */\nexport function uz(input) {\n    return new Base(input);\n}\n/**\n * The main class which contains a list of ranges and the user input.\n */\nvar Base = (function () {\n    /**\n     * Creates a new instance of Base given some user input to parse or an\n     * existing list of ranges to use instead.\n     *\n     * @param input The input to parse if ranges is not provided.\n     * @param ranges The already parsed ranges to use for this instance.\n     */\n    function Base(input, ranges) {\n        this.input = input;\n        this.ranges = ranges || Parse.ranges(input);\n    }\n    /**\n     * Scales the ranges in this instance by the given factor and returns a\n     * new instance.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('1c, 2.3m').scale(2); // '2c, 4.6m'\n     * ```\n     *\n     * @param amount The factor to scale the ranges in this instance by.\n     * @return A new instance.\n     * @see [[Range.scale]]\n     * @see [[Base.mutate]]\n     */\n    Base.prototype.scale = function (amount) {\n        return this.mutate(function (r) { return r.scale(amount); });\n    };\n    /**\n     * Scales the ranges in this instance by the given value and returns a\n     * new instance.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('1c, 3/5m').scale(Value.fromFraction(2, 3)); // '2/3c, 6/15m'\n     * ```\n     *\n     * @param amount The value to scale the ranges in this instance by.\n     * @return A new instance.\n     * @see [[Range.mul]]\n     * @see [[Base.mutate]]\n     */\n    Base.prototype.mul = function (amount) {\n        return this.mutate(function (r) { return r.mul(amount); });\n    };\n    // 1c, 3m SCALE TO 1/2c = 1/2c, 1.5m\n    /**\n     * Scales the ranges in this instance up to some value with a unit and returns\n     * a new instance. Because this instance might contain ranges, a rangeDelta\n     * can be specified to instruct on which value (min or max) to use when\n     * calculating how much to scale by.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('1m, 2 - 3c').scaleTo('6c'); // '2m, 4 - 6c'\n     * uz('1m, 2 - 3c').scaleTo('6c', 0); // '3m, 6 - 9c'\n     * uz('1m, 2 - 3c').scaleTo('6c', 0.5); // '2.4m, 4.8 - 6c'\n     * ```\n     *\n     * @param unitValue A value & unit pair to scale the ranges in this instance to.\n     * @param rangeDelta When this instance contains ranges this value instructs\n     *  how the scale factor is calculated. A value of 0 means it looks at the\n     *  minimum, 1 is the maximum, and 0.5 is the average.\n     * @return A new instance.\n     * @see [[Base.getScaleTo]]\n     * @see [[Base.scale]]\n     */\n    Base.prototype.scaleTo = function (unitValue, rangeDelta) {\n        if (rangeDelta === void 0) { rangeDelta = 1.0; }\n        return this.scale(this.getScaleTo(unitValue, rangeDelta));\n    };\n    /**\n     * Changes the units used on each of the ranges in this instance to the\n     * preferred unit for each group.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('5 kilos').preferred(); // '5 kg'\n     * ```\n     *\n     * @return A new instance.\n     * @see [[Core.setPreferred]]\n     * @see [[Range.preferred]]\n     * @see [[Base.mutate]]\n     */\n    Base.prototype.preferred = function () {\n        return this.mutate(function (r) { return r.preferred(); });\n    };\n    /**\n     * Drops negative ranges and modifies partially negative ranges so that all\n     * values are greater than or equal to zero.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('0c, 2tbsp, -4tbsp').positive(); // '0c, 2tbsp'\n     * uz('-2 - 3 in').positive(); // '0 - 3in'\n     * ```\n     *\n     * @return A new instance.\n     * @see [[Range.positive]]\n     * @see [[Base.mutate]]\n     */\n    Base.prototype.positive = function () {\n        return this.mutate(function (r) { return r.positive(); });\n    };\n    /**\n     * Drops positive ranges and modifies partially positive ranges so that all\n     * values are less than zero.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('0c, 2tbsp, -4tbsp').negative(); // '-4tbsp'\n     * uz('-2 - 3 in').negative(); // '-2 - 0in'\n     * ```\n     *\n     * @return A new instance.\n     * @see [[Range.negative]]\n     * @see [[Base.mutate]]\n     */\n    Base.prototype.negative = function () {\n        return this.mutate(function (r) { return r.negative(); });\n    };\n    /**\n     * Drops ranges that are equal to zero.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('0c, 2tbsp').negative(); // '2tbsp'\n     * ```\n     *\n     * @return A new instance.\n     * @see [[Range.nonzero]]\n     * @see [[Base.mutate]]\n     */\n    Base.prototype.nonzero = function () {\n        return this.mutate(function (r) { return r.nonzero(); });\n    };\n    /**\n     * Converts each range to fractions if a denominator for the specified units\n     * yields a fraction close enough to the original value.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('1/2 cup').fractions(); // '1/2 cup'\n     * uz('0.3cm').fractions(); // '3/10 cm'\n     * uz('0.33 decades').fractions(); // '0.33 decades' closest is 3/10 but that's not close enough\n     * ```\n     *\n     * @return A new instance.\n     * @see [[Range.fractioned]]\n     * @see [[Base.mutate]]\n     */\n    Base.prototype.fractions = function () {\n        return this.mutate(function (r) { return r.fractioned(); });\n    };\n    /**\n     * Converts each range to numbers if they are fractions.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('1/2 cup').fractions(); // '0.5 cup'\n     * uz('0.3cm').fractions(); // '0.3 cm'\n     * ```\n     *\n     * @return A new instance.\n     * @see [[Range.numbered]]\n     * @see [[Base.mutate]]\n     */\n    Base.prototype.numbers = function () {\n        return this.mutate(function (r) { return r.numbered(); });\n    };\n    /**\n     * Flattens any ranges to their maximum values.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('1 - 3c, 5m').max(); // '3c, 5m'\n     * ```\n     *\n     * @return A new instance or this if this instance has no ranges.\n     * @see [[Range.maxd]]\n     * @see [[Base.mutate]]\n     */\n    Base.prototype.max = function () {\n        return this.hasRanges ? this.mutate(function (r) { return r.maxd(); }) : this;\n    };\n    /**\n     * Flattens any ranges to their minimum values.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('1 - 3c, 5m').max(); // '1c, 5m'\n     * ```\n     *\n     * @return A new instance or this if this instance has no ranges.\n     * @see [[Range.mind]]\n     * @see [[Base.mutate]]\n     */\n    Base.prototype.min = function () {\n        return this.hasRanges ? this.mutate(function (r) { return r.mind(); }) : this;\n    };\n    /**\n     * Converts each range to units that best represent the value.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('1.5pt, 12in, 3.14159rad').normalize(); // '3c, 1ft, 180deg'\n     * ```\n     *\n     * @param options Options to control which units and values are acceptable.\n     * @param forOutput The output options that should be used to determine which\n     *  value & unit is best.\n     * @return A new instance.\n     * @see [[Transform]]\n     * @see [[Output]]\n     * @see [[Core.isMoreNormal]]\n     * @see [[Core.globalTransform]]\n     * @see [[Core.globalOutput]]\n     * @see [[Range.normalize]]\n     * @see [[Base.mutate]]\n     */\n    Base.prototype.normalize = function (options, forOutput) {\n        var output = Core.globalOutput.extend(forOutput);\n        var transform = Core.globalTransform.extend(options);\n        return this.mutate(function (r) { return r.normalize(transform, output); });\n    };\n    /**\n     * Joins all ranges of the same classes together and uses the largest unit\n     * to represent the sum for the class.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('1c, 1pt').compact(); // '1.5pt'\n     * ```\n     *\n     * @param options Options to control which units and values are acceptable.\n     * @return A new instance.\n     * @see [[Transform]]\n     * @see [[Core.globalTransform]]\n     */\n    Base.prototype.compact = function (options) {\n        var ranges = this.ranges.slice();\n        var compacted = [];\n        var transform = Core.globalTransform.extend(options);\n        // Largest ranges first\n        ranges.sort(function (a, b) {\n            return b.max.classScaled - a.max.classScaled;\n        });\n        for (var i = 0; i < ranges.length; i++) {\n            var a = ranges[i];\n            var min = a.min;\n            var max = a.max;\n            for (var k = ranges.length - 1; k > i; k--) {\n                var b = ranges[k];\n                if (a.isMatch(b.min, b.max)) {\n                    min = min.add(b.min.convertToValue(min.group, min.rateGroup));\n                    max = max.add(b.max.convertToValue(max.group, max.rateGroup));\n                    ranges.splice(k, 1);\n                }\n            }\n            var sum = new Range(min, max);\n            if (transform.isValidRange(sum)) {\n                compacted.push(sum);\n            }\n        }\n        return new Base(this.input, compacted);\n    };\n    /**\n     * Joins all ranges of the same classes together and then separates them\n     * into whole number ranges for better readability.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('1.5pt').expand(); // '1pt, 1c'\n     * uz('53in').expand(); // '4ft, 5in'\n     * uz('2ft, 29in').expand(); // '4ft, 5in'\n     * uz('6543mm').expand(); // '6 m, 54 cm, 3 mm'\n     * ```\n     *\n     * @param options Options to control which units and values are acceptable.\n     * @return A new instance.\n     * @see [[Transform]]\n     * @see [[Core.globalTransform]]\n     */\n    Base.prototype.expand = function (options) {\n        var transform = Core.globalTransform.extend(options);\n        var compacted = this.compact(transform);\n        var ranges = compacted.ranges;\n        var expanded = [];\n        var _loop_1 = function (i) {\n            var range = ranges[i];\n            var value = transform.convertWithMax ? range.max : range.min;\n            var valueGroup = value.group;\n            var valueSign = fn.sign(value.value);\n            var valueRate = value.rateGroup;\n            if (valueGroup) {\n                valueGroup.matches(transform, true, function (group) {\n                    if (!fn.isZero(value.value)) {\n                        var transformed = value.convertToValue(group, valueRate);\n                        if (group.isBase) {\n                            value = value.zero();\n                            expanded.push(Range.fromFixed(transformed));\n                        }\n                        else if (fn.abs(transformed.value) >= 1 && fn.sign(transformed.value) === valueSign) {\n                            var truncated = transformed.truncated();\n                            value = value.sub(truncated.convertToValue(valueGroup, valueRate));\n                            expanded.push(Range.fromFixed(truncated));\n                        }\n                    }\n                });\n            }\n            else {\n                expanded.push(range);\n            }\n        };\n        for (var i = 0; i < ranges.length; i++) {\n            _loop_1(i);\n        }\n        return new Base(this.input, expanded);\n    };\n    /**\n     * Adds the ranges of this instance and the given input together. When the\n     * ranges use the same units they are added together, otherwise they are\n     * added to the end of the range list.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('1pt').add('2pt, 1c'); // '3pt, 1c'\n     * uz('1pt').add('2pt, 1c', 2); // '5pt, 2c'\n     * ```\n     *\n     * @param input An instance or input which can be parsed into an instance.\n     * @param scale A number to multiple the input by when adding it to this instance.\n     * @return A new instance.\n     * @see [[Base.operate]]\n     * @see [[Range.add]]\n     * @see [[Range.scale]]\n     */\n    Base.prototype.add = function (input, scale) {\n        if (scale === void 0) { scale = 1; }\n        return this.operate(input, function (a, b) { return a.add(b, scale); }, function (a) { return a.scale(scale); });\n    };\n    /**\n     * Subtracts the given input from the ranges of this instance. When the ranges\n     * use the same units they are subtracted, otherwise they are added to the\n     * end of the range list and negated.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('3pt').sub('2pt, 1c'); // '1pt, -1c'\n     * uz('1pt').add('2pt, 1c', 2); // '-3pt, -2c'\n     * ```\n     *\n     * @param input An instance or input which can be parsed into an instance.\n     * @param scale A number to multiple the input by when subtracting it from this instance.\n     * @return A new instance.\n     * @see [[Base.operate]]\n     * @see [[Range.sub]]\n     * @see [[Range.scale]]\n     */\n    Base.prototype.sub = function (input, scale) {\n        if (scale === void 0) { scale = 1; }\n        return this.operate(input, function (a, b) { return a.sub(b, scale); }, function (a) { return a.scale(-scale); });\n    };\n    /**\n     * Subtracts the given input from the ranges of this instance. When the ranges\n     * use the same units they are subtracted, otherwise they are added to the\n     * end of the range list and negated.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('3pt').sub('2pt, 1c'); // '1pt, -1c'\n     * uz('1pt').add('2pt, 1c', 2); // '-3pt, -2c'\n     * ```\n     *\n     * @param input An instance or input which can be parsed into an instance.\n     * @param operate A function to call when matching ranges are found and an\n     *  operation should be performed between them. The range returned by this\n     *  function ends up in the result.\n     * @param operate.a The first range to operate on.\n     * @param operate.b The second range to operate on.\n     * @param remainder A function to call on a range that did not have a match\n     *  in this instance where the range returned is added to the result.\n     * @param remainder.a The remaining range to operate on.\n     * @return A new instance.\n     * @see [[Range.isExactMatch]]\n     */\n    Base.prototype.operate = function (input, operate, remainder) {\n        var ranges = this.ranges;\n        var output = [];\n        var other = Parse.base(input);\n        var otherRanges = other.ranges;\n        var otherUsed = [];\n        for (var i = 0; i < ranges.length; i++) {\n            var range = ranges[i];\n            for (var k = 0; k < otherRanges.length; k++) {\n                if (!otherUsed[k]) {\n                    var otherRange = otherRanges[k];\n                    if (range.isExactMatch(otherRange)) {\n                        range = operate(range, otherRange);\n                        otherUsed[k] = true;\n                    }\n                }\n            }\n            output.push(range);\n        }\n        for (var k = 0; k < otherRanges.length; k++) {\n            if (!otherUsed[k]) {\n                output.push(remainder(otherRanges[k]));\n            }\n        }\n        return new Base(this.input, output);\n    };\n    /**\n     * Joins all ranges of the same classes together and then calculates all\n     * equivalent ranges for each range for each valid group according to the\n     * given options.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('1.5pt').conversions(); // '3/16gal, 3/4qt, 1 1/2pt, 3c, 24floz, 48tbsp, 144tsp'\n     * uz('20celsius, 45deg'); // '68F, 20celsius, 45deg, 0.785rad'\n     * ```\n     *\n     * @param options Options to control which units and values are acceptable.\n     * @return A new instance.\n     * @see [[Transform]]\n     * @see [[Core.globalTransform]]\n     * @see [[Value.conversions]]\n     */\n    Base.prototype.conversions = function (options) {\n        var transform = Core.globalTransform.extend(options);\n        var compacted = this.compact(options);\n        var ranges = compacted.ranges;\n        var output = [];\n        var _loop_2 = function (i) {\n            var range = ranges[i];\n            var convert = transform.convertWithMax ? range.max : range.min;\n            convert.conversions(transform, false, function (transformed) {\n                var min = transform.convertWithMax ? range.min.convertToValue(transformed.group, transformed.rateGroup) : transformed;\n                var max = transform.convertWithMax ? transformed : range.max.convertToValue(transformed.group, transformed.rateGroup);\n                if (min.value <= transform.max && max.value >= transform.min) {\n                    output.push(new Range(min, max));\n                }\n            });\n        };\n        for (var i = 0; i < ranges.length; i++) {\n            _loop_2(i);\n        }\n        return new Base(this.input, output);\n    };\n    /**\n     * Executes the given function on each range in this instance and if the\n     * function returns a valid range its added to the result.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('1.5pt').mutate(r => r.scale(2)); // '3pt'\n     * ```\n     *\n     * @param mutator The function which may return a range.\n     * @return A new instance.\n     */\n    Base.prototype.mutate = function (mutator) {\n        var ranges = [];\n        var source = this.ranges;\n        for (var i = 0; i < source.length; i++) {\n            var mutated = mutator(source[i]);\n            if (mutated && mutated.isValid) {\n                ranges.push(mutated);\n            }\n        }\n        return new Base(this.input, ranges);\n    };\n    /**\n     * Removes the ranges from this instance that aren't valid according to the\n     * transform options provided taking into account the global options.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('1in, 2m').filter({system: Unitz.System.METRIC}); // '2m'\n     * ```\n     *\n     * @param options Options to control which units and values are acceptable.\n     * @return A new instance.\n     * @see [[Transform]]\n     * @see [[Core.globalTransform]]\n     * @see [[Transform.isValidRange]]\n     */\n    Base.prototype.filter = function (options) {\n        var transform = Core.globalTransform.extend(options);\n        var ranges = this.ranges;\n        var filtered = [];\n        for (var i = 0; i < ranges.length; i++) {\n            var range = ranges[i];\n            if (transform.isValidRange(range)) {\n                filtered.push(range);\n            }\n        }\n        return new Base(this.input, filtered);\n    };\n    /**\n     * Sorts the ranges in this instance based on the options provided taking into\n     * account the global options.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('1in, 3ft, 1.3yd, 1m').sort(); // 1.3yd, 1m, 3ft, 1in\n     * uz('1in, 3ft, 1.3yd, 1m').sort({ascending: true}); // 1in, 3ft, 1m, 1.3yd\n     * uz('1-3cups, 2-2.5cups, 4in').sort({\n     *  type: Unitz.SortType.MIN,\n     *  classes: {\n     *   Volume: 1,\n     *   Length: 2\n     *  }\n     * }); // 4in, 2 - 2.5cups, 1 - 3cups\n     * ```\n     *\n     * @param options Options to control how sorting is done.\n     * @return A new instance.\n     * @see [[Sort]]\n     * @see [[Core.globalSort]]\n     */\n    Base.prototype.sort = function (options) {\n        var sort = Core.globalSort.extend(options);\n        var ranges = this.ranges.slice();\n        ranges.sort(sort.getSorter());\n        return new Base(this.input, ranges);\n    };\n    /**\n     * Calculates what this instance would need to be scaled by so that the given\n     * value & unit pair is equal to the sum of ranges in this instance of the\n     * same class. If there are no ranges with the same class then zero is\n     * returned. If the sum of ranges with the same class results in an actual\n     * range (where min != max) then you can specify how to pick a value from the\n     * range with rangeDetla. A value of 0 uses the min, 1 uses the max, and 0.5\n     * uses the average between them.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('1m, 2 - 3c').getScaleTo('6c'); // 2\n     * uz('1m, 2 - 3c').getScaleTo('6c', 0); // 3\n     * uz('1m, 2 - 3c').getScaleTo('6c', 0.5); // 2.4\n     * uz('1m, 2 - 3c').getScaleTo('45deg'); // 0\n     * ```\n  \n     * @param unitValue A value & unit pair to scale the ranges in this instance to.\n     * @param rangeDelta When this instance contains ranges this value instructs\n     *  how the scale factor is calculated. A value of 0 means it looks at the\n     *  minimum, 1 is the maximum, and 0.5 is the average.\n     * @return A value to scale by or zero if this instance cannot match the input.\n     * @see [[Base.convert]]\n     * @see [[Parse.value]]\n     */\n    Base.prototype.getScaleTo = function (unitValue, rangeDelta) {\n        if (rangeDelta === void 0) { rangeDelta = 1.0; }\n        var to = Parse.value(unitValue);\n        if (!to.isValid) {\n            return 0;\n        }\n        var converted = this.convert(to.units());\n        if (!converted || !converted.isValid) {\n            return 0;\n        }\n        var convertedValue = (converted.maximum - converted.minimum) * rangeDelta + converted.minimum;\n        var scale = to.value / convertedValue;\n        return scale;\n    };\n    /**\n     * Converts the ranges in this instance to a string with the given output\n     * options taking into account the global options.\n     *\n     * @param options The options to override the global output options.\n     * @return The string representation of this instance.\n     * @see [[Output]]\n     */\n    Base.prototype.output = function (options) {\n        var output = Core.globalOutput.extend(options);\n        return output.ranges(this.ranges);\n    };\n    /**\n     * Converts the appropriate ranges in this instance into the desired unit\n     * and returns their converted sum. If the given unit does not map to a group\n     * then null is returned. If there are no ranges in this instance in the same\n     * class then the range returned is equivalent to zero.\n     *\n     * *For example:*\n     * ```javascript\n     * uz('1in, 1m, 1ft').convert('cm'); // '133.02 cm'\n     * uz('60 mph').convert('miles per minute'); // '1 miles/minute'\n     * ```\n     *\n     * @param unit The unit to calculate the sum of.\n     * @return A new range which is the sum of ranges in the same class converted\n     *  to the desired unit.\n     * @see [[Core.getGroup]]\n     * @see [[Range.isZero]]\n     */\n    Base.prototype.convert = function (unit) {\n        var unitParsed = Parse.unit(unit);\n        var group = Core.getGroup(unitParsed.unit);\n        var rateGroup = Core.getGroup(unitParsed.rate);\n        if (!group) {\n            return null;\n        }\n        var ranges = this.ranges;\n        var min = new Value(0, 0, 1, unit, group, unitParsed.rate, rateGroup);\n        var max = new Value(0, 0, 1, unit, group, unitParsed.rate, rateGroup);\n        for (var i = 0; i < ranges.length; i++) {\n            var range = ranges[i];\n            if (range.isMatch(min, max)) {\n                min = min.add(range.min.convertToValue(group, rateGroup));\n                max = max.add(range.max.convertToValue(group, rateGroup));\n            }\n        }\n        return new Range(min, max);\n    };\n    /**\n     * Alias for [[Base.convert]].\n     */\n    Base.prototype.to = function (unit) {\n        return this.convert(unit);\n    };\n    /**\n     * Iterates over each range in this instance in order or reversed and passes\n     * each one to the given iterate function. If the iterate function returns\n     * false the iteration will stop.\n     *\n     * @param iterate The function to invoke with each range and it's index.\n     * @param iterate.range The current range being iterated.\n     * @param iterate.index The index of the current range in this instance.\n     * @param reverse Whether the iteration should be done forward or backward.\n     * @return The reference to this instance.\n     */\n    Base.prototype.each = function (iterate, reverse) {\n        if (reverse === void 0) { reverse = false; }\n        var ranges = this.ranges;\n        var start = reverse ? ranges.length - 1 : 0;\n        var end = reverse ? -1 : ranges.length;\n        var move = reverse ? -1 : 1;\n        for (var i = start; i !== end; i += move) {\n            if (iterate(ranges[i], i) === false) {\n                break;\n            }\n        }\n        return this;\n    };\n    /**\n     * Returns an array of the classes represented in this instance. If there are\n     * no classes in this instance then an empty array is returned.\n     *\n     * @return An array of the classes in this instance.\n     */\n    Base.prototype.classes = function () {\n        var ranges = this.ranges;\n        var classMap = {};\n        var classes = [];\n        for (var i = 0; i < ranges.length; i++) {\n            var range = ranges[i];\n            var group = range.min.group;\n            if (group) {\n                classMap[group.parent.name] = group.parent;\n            }\n        }\n        for (var className in classMap) {\n            classes.push(classMap[className]);\n        }\n        return classes;\n    };\n    Object.defineProperty(Base.prototype, \"hasRanges\", {\n        /**\n         * Returns whether this instance has actual ranges. An actual range is where\n         * the minimum and maximum values differ.\n         *\n         * @see [[Range.isRange]]\n         */\n        get: function () {\n            return this.test(false, false, function (r) { return r.isRange; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Base.prototype, \"hasRates\", {\n        /**\n         * Returns whether this instance has values or ranges that are rates.\n         *\n         * @see [[Range.isRate]]\n         */\n        get: function () {\n            return this.test(false, false, function (r) { return r.isRate; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Base.prototype, \"isValid\", {\n        /**\n         * Returns whether this instance only has valid ranges. If any of the ranges\n         * in this instance are not valid false is returned, otherwise true.\n         *\n         * @see [[Range.isValid]]\n         */\n        get: function () {\n            return this.test(true, true, function (r) { return r.isValid; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Performs a test on the ranges in this instance and returns whether the\n     * ranges passed the test. If the `tester` function returns something\n     * different than `expected` then the function ends early with `!passed`.\n     * If all tests pass then `passed` is returned.\n     *\n     * @param expected The expected result of the tester.\n     * @param passed The value to return if all ranges pass the test.\n     * @param tester The function to test a range.\n     * @return Return `passed` if all ranges return `expected` from `tester`.\n     */\n    Base.prototype.test = function (expected, passed, tester) {\n        var ranges = this.ranges;\n        for (var i = 0; i < ranges.length; i++) {\n            if (tester(ranges[i]) != expected) {\n                return !passed;\n            }\n        }\n        return passed;\n    };\n    Object.defineProperty(Base.prototype, \"length\", {\n        /**\n         * Returns the number of ranges in this instance.\n         */\n        get: function () {\n            return this.ranges.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Base.prototype, \"isFixed\", {\n        /**\n         * Returns true if this instance has a single fixed value.\n         *\n         * @see [[Range.isFixed]]\n         */\n        get: function () {\n            return this.ranges.length === 1 && this.ranges[0].isFixed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Base.prototype, \"isRange\", {\n        /**\n         * Returns true if this instance has a single range.\n         *\n         * @see [[Range.isRange]]\n         */\n        get: function () {\n            return this.ranges.length === 1 && this.ranges[0].isRange;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Base.prototype, \"isRate\", {\n        /**\n         * Returns true if this instance has a single rate.\n         *\n         * @see [[Range.isRate]]\n         */\n        get: function () {\n            return this.ranges.length === 1 && this.ranges[0].isRate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Base;\n}());\nexport { Base };\n//# sourceMappingURL=Base.js.map","\"use strict\";\nimport { Core } from './Core';\nimport { Parse } from './Parse';\nimport { Value } from './Value';\n/**\n * Creates a [[Translator]] which matches against a regular expression and when\n * the user input matches the regular expression another handler function is\n * called to translate the input. Optionally a constant value can be passed\n * to this function and down to the translator.\n *\n * @param regex The regular expression to match against user input.\n * @param handler The function to call if the input matched the expression.\n * @param vars The constant value to pass to the [[RegexTranslator]].\n * @return A [[Translator]] function.\n */\nexport function newRegexTranslator(regex, handler, vars) {\n    return function (x) {\n        var matches = x.match(regex);\n        if (matches) {\n            x = handler(matches, vars);\n        }\n        return x;\n    };\n}\n/**\n * The class which holds [[Translator]]s to manipulate user input into something\n * more understandable to the [[Parse]] class.\n */\nvar Translations = (function () {\n    function Translations() {\n    }\n    /**\n     * Adds all translators in the library to be available when parsing.\n     */\n    Translations.addDefaults = function () {\n        this.add(this.Quantity);\n        this.add(this.NumberWords);\n        this.add(this.FractionOfNumber);\n        this.add(this.AndFraction);\n        this.add(this.QuantityValue);\n    };\n    /**\n     * Adds the given translator to the list of registered translators. This\n     * translator will be called last.\n     *\n     * @param translator The function which translates user input.\n  \n     */\n    Translations.add = function (translator) {\n        this.registered.push(translator);\n    };\n    /**\n     * Translates the user input based on the registered translators and returns\n     * the final string ready to be parsed.\n     *\n     * @param input The input to translate.\n     * @return The translated string.\n     */\n    Translations.translate = function (input) {\n        var registered = this.registered;\n        for (var i = 0; i < registered.length; i++) {\n            input = registered[i](input);\n        }\n        return input;\n    };\n    /**\n     * An array of translators that have been registered.\n     *\n     * @see [[Translations.add]]\n     */\n    Translations.registered = [];\n    /**\n     * A translator which takes a word which represents a number and converts it\n     * the respective number.\n     *\n     * *Examples:*\n     * - one [unit]\n     * - dozen [unit]\n     * - an eleven [unit]\n     */\n    Translations.NumberWords = newRegexTranslator(/^(an?\\s+|)(one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|dozen|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|fourty|fifty|sixty|seventy|eighty|ninety)\\s+(.*)/i, function (matches, vars) {\n        var wordName = matches[2];\n        var remaining = matches[3];\n        return vars[wordName] + ' ' + remaining;\n    }, {\n        one: '1',\n        two: '2',\n        three: '3',\n        four: '4',\n        five: '5',\n        six: '6',\n        seven: '7',\n        eight: '8',\n        nine: '9',\n        ten: '10',\n        eleven: '11',\n        twelve: '12',\n        dozen: '12',\n        thirteen: '13',\n        fouteen: '14',\n        fifteen: '15',\n        sixteen: '16',\n        seventeen: '17',\n        eighteen: '18',\n        nineteen: '19',\n        twenty: '20',\n        thirty: '30',\n        fourty: '40',\n        fifty: '50',\n        sixty: '60',\n        seventy: '70',\n        eighty: '80',\n        ninety: '90'\n    });\n    /**\n     * A translator which takes a word which represents a fraction and multiplies\n     * it by the following value.\n     *\n     * *Examples:*\n     * - a third of an acre\n     * - half a dozen eggs\n     * - a seventh of a mile\n     */\n    Translations.FractionOfNumber = newRegexTranslator(/^(an?\\s+|one|)(half|third|fourth|fifth|sixth|seventh|eighth|nineth|tenth)\\s+(a\\s+|an\\s+|of\\s+an?\\s+|of\\s+)(.*)/i, function (matches, vars) {\n        var remaining = matches[4];\n        var parsed = Parse.valueFromString(remaining);\n        var fractionName = matches[2].toLowerCase();\n        var fraction = vars[fractionName];\n        return parsed.mul(fraction).output(Core.globalOutput);\n    }, {\n        half: Value.fromFraction(1, 2),\n        third: Value.fromFraction(1, 3),\n        fourth: Value.fromFraction(1, 4),\n        fifth: Value.fromFraction(1, 5),\n        sixth: Value.fromFraction(1, 6),\n        seventh: Value.fromFraction(1, 7),\n        eighth: Value.fromFraction(1, 8),\n        nineth: Value.fromFraction(1, 9),\n        tenth: Value.fromFraction(1, 10)\n    });\n    /**\n     * A translator which takes a word which represents a fraction and multiplies\n     * it by the following value.\n     *\n     * *Examples:*\n     * - 23 and a half eggs\n     * - one and a half acres\n     * - 23 and a third\n     * - 12 and one fourth\n     */\n    Translations.AndFraction = newRegexTranslator(/^(.*)\\s+and\\s+(an?|one)\\s+(half|third|fourth|fifth|sixth|seventh|eighth|nineth|tenth)\\s*(.*)/i, function (matches, vars) {\n        var prefix = matches[1];\n        var units = matches[4];\n        var value = Parse.valueFromString(prefix + units);\n        var fractionName = matches[3].toLowerCase();\n        var fraction = vars[fractionName];\n        return value.add(fraction).output(Core.globalOutput);\n    }, {\n        half: Value.fromFraction(1, 2),\n        third: Value.fromFraction(1, 3),\n        fourth: Value.fromFraction(1, 4),\n        fifth: Value.fromFraction(1, 5),\n        sixth: Value.fromFraction(1, 6),\n        seventh: Value.fromFraction(1, 7),\n        eighth: Value.fromFraction(1, 8),\n        nineth: Value.fromFraction(1, 9),\n        tenth: Value.fromFraction(1, 10)\n    });\n    /**\n     * A translator which takes the amount in parenthesis and moves it out.\n     *\n     * *Examples:*\n     * - (one and a half) acre\n     * - (12) tacos\n     */\n    Translations.Quantity = newRegexTranslator(/^\\((.*)\\)(.*)$/, function (matches) {\n        var quantity = matches[1];\n        var unit = matches[2];\n        return quantity + unit;\n    });\n    /**\n     * A translator which takes the amount in parenthesis and moves it out.\n     *\n     * *Examples:*\n     * - 1 (6 ounce)\n     * - 5 (3 liter)\n     */\n    Translations.QuantityValue = newRegexTranslator(/^\\s*((-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|))\\s*\\(\\s*((-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|)\\s*(.*))\\s*\\)\\s*$/i, function (matches) {\n        var quantityInput = matches[1];\n        var quantity = Parse.valueFromString(quantityInput);\n        var alternativeInput = matches[8];\n        var alternative = Parse.valueFromString(alternativeInput);\n        return alternative.mul(quantity).output(Core.globalOutput);\n    });\n    return Translations;\n}());\nexport { Translations };\n//# sourceMappingURL=Translations.js.map","\"use strict\";\n/**\n * The class which holds [[Rate]]s mapped by their abbreviations.\n */\nvar Rates = (function () {\n    function Rates() {\n    }\n    /**\n     * Adds all rates in the library to be available when parsing.\n     */\n    Rates.addDefaults = function () {\n        this.add('miles', 'hour', ['mph']);\n        this.add('nautical miles', 'hour', ['knot', 'knots']);\n        this.add('kilometers', 'hour', ['kph', 'kmph', 'km. hr.', 'k.p.h.', 'k.m.p.h.', 'km:h']);\n    };\n    /**\n     * Adds one or many rates given the unit, rate, and all abbreviations.\n     *\n     * @param unit The unit.\n     * @param rate The rate unit.\n     * @param names The list of abbreviations for this rate.\n     */\n    Rates.add = function (unit, rate, names) {\n        for (var i = 0; i < names.length; i++) {\n            this.registered[names[i].toLowerCase()] = { unit: unit, rate: rate };\n        }\n    };\n    /**\n     * Gets the rate for the given input or `undefined` if none exists.\n     *\n     * @param input The input to find a rate for.\n     * @return The rate mapped by the input, otherwise `undefined`.\n     */\n    Rates.get = function (input) {\n        return this.registered[input.toLowerCase()];\n    };\n    /**\n     * An object of rates mapped by their abbreviation.\n     *\n     * @see [[Rates.add]]\n     */\n    Rates.registered = {};\n    return Rates;\n}());\nexport { Rates };\n//# sourceMappingURL=Rates.js.map","\"use strict\";\nimport { Functions as fn } from './Functions';\nimport { Core } from './Core';\nimport { Range } from './Range';\nimport { Value } from './Value';\nimport { Base } from './Base';\nimport { Translations } from './Translations';\nimport { Rates } from './Rates';\n/**\n * The class which takes user input and parses it to specific structures.\n */\nvar Parse = (function () {\n    function Parse() {\n    }\n    /**\n     * Parses user input into a [[Base]] instance.\n     *\n     * @param input The input to parse into a Base.\n     * @return The instance parsed from the input.\n     */\n    Parse.base = function (input) {\n        if (input instanceof Base) {\n            return input;\n        }\n        return new Base(input);\n    };\n    /**\n     * Parses user input into a an array of [[Range]]s.\n     *\n     * @param input The input to parse.\n     * @return The instances parsed from the input.\n     */\n    Parse.ranges = function (input) {\n        if (fn.isArray(input)) {\n            return this.rangesFromArray(input);\n        }\n        else if (fn.isString(input)) {\n            return this.rangesFromString(input);\n        }\n        else if (fn.isRangeDefinition(input)) {\n            return this.rangesFromArray([input]);\n        }\n        else if (fn.isValueDefinition(input)) {\n            return this.rangesFromArray([input]);\n        }\n        return [];\n    };\n    /**\n     * Parses user input into a an array of [[Range]]s.\n     *\n     * @param input The input to parse.\n     * @return The instances parsed from the input.\n     */\n    Parse.rangesFromArray = function (input) {\n        var ranges = [];\n        for (var i = 0; i < input.length; i++) {\n            var range = this.range(input[i]);\n            ranges.push(range);\n        }\n        return ranges;\n    };\n    /**\n     * Parses user input into a an array of [[Range]]s.\n     *\n     * @param input The input to parse.\n     * @return The instances parsed from the input.\n     */\n    Parse.rangesFromString = function (input) {\n        var ranges = input.split(this.REGEX_LIST);\n        return this.rangesFromArray(ranges);\n    };\n    /**\n     * Parses user input into a [[Range]].\n     *\n     * @param input The input to parse.\n     * @return The instance parsed from the input.\n     */\n    Parse.range = function (input) {\n        if (fn.isString(input)) {\n            return this.rangeFromString(input);\n        }\n        else if (fn.isRangeDefinition(input)) {\n            var min = this.value(input.min);\n            var max = this.value(input.max);\n            return new Range(min, max);\n        }\n        else if (fn.isValueDefinition(input)) {\n            var value = this.valueFromValue(input);\n            return new Range(value, value);\n        }\n        return Range.INVALID;\n    };\n    /**\n     * Parses user input into a [[Range]].\n     *\n     * @param input The input to parse.\n     * @return The instance parsed from the input.\n     */\n    Parse.rangeFromString = function (input) {\n        var matches = this.REGEX_RANGE.exec(input);\n        if (!matches) {\n            var fixed = this.valueFromString(input);\n            return new Range(fixed, fixed);\n        }\n        var minInput = matches[1];\n        var maxInput = matches[2];\n        var minParsed = this.input(minInput);\n        var maxParsed = this.input(maxInput);\n        if (!minParsed || !maxParsed) {\n            return Range.INVALID;\n        }\n        var minUnit = minParsed.unit || maxParsed.unit;\n        var maxUnit = maxParsed.unit || minParsed.unit;\n        var minRate = minParsed.rate || maxParsed.rate;\n        var maxRate = maxParsed.rate || minParsed.rate;\n        var min = this.valueFromResult(minParsed, minUnit, minRate);\n        var max = this.valueFromResult(maxParsed, maxUnit, maxRate);\n        return new Range(min, max);\n    };\n    /**\n     * Parses user input into a [[Value]].\n     *\n     * @param input The input to parse.\n     * @return The instance parsed from the input.\n     */\n    Parse.value = function (input) {\n        if (fn.isString(input)) {\n            return this.valueFromString(input);\n        }\n        else if (fn.isValueDefinition(input)) {\n            return this.valueFromValue(input);\n        }\n        return Value.INVALID;\n    };\n    /**\n     * Parses user input into a [[Value]].\n     *\n     * @param input The input to parse.\n     * @return The instance parsed from the input.\n     */\n    Parse.valueFromValue = function (input) {\n        var givenValue = fn.isDefined(input.value) ? input.value : 1;\n        var num = fn.isDefined(input.num) ? input.num : givenValue;\n        var den = fn.isDefined(input.den) ? input.den : 1;\n        var parsedValue = fn.isDefined(input.value) ? input.value : num / den;\n        var unit = input.unit || '';\n        var rate = input.rate || '';\n        var group = Core.getGroup(unit);\n        var rateGroup = Core.getGroup(rate);\n        return new Value(parsedValue, num, den, unit, group, rate, rateGroup);\n    };\n    /**\n     * Parses user input into a [[Value]].\n     *\n     * @param input The input to parse.\n     * @return The instance parsed from the input.\n     */\n    Parse.valueFromString = function (input) {\n        var translated = Translations.translate(input);\n        var parsed = this.input(translated);\n        return parsed ? this.valueFromResult(parsed, parsed.unit, parsed.rate) : Value.INVALID;\n    };\n    /**\n     * Parses user input into a [[Value]].\n     *\n     * @param result The already parsed input.\n     * @param unit The unit parsed from the input.\n     * @return The instance parsed from the input.\n     */\n    Parse.valueFromResult = function (result, unit, rateUnit) {\n        var group = Core.getGroup(unit);\n        var rateGroup = Core.getGroup(rateUnit);\n        return new Value(result.value, result.valueNum, result.valueDen, unit, group, rateUnit, rateGroup);\n    };\n    /**\n     * Parses user input into a [[ParseResult]]. If the input is not valid null\n     * is returned.\n     *\n     * *Examples:*\n     * - 1tsp\n     * - 1 tsp\n     * - 1/2 tsp\n     * - 1 1/2 tsp\n     * - -2 cups\n     * - 2.35\"\n     *\n     * @param input The string to parse a value and unit from.\n     * @return The result of the parsing.\n     */\n    Parse.input = function (input) {\n        var matches = this.REGEX_PARSE.exec(input);\n        var whole = parseInt(matches[1]);\n        var hasWhole = isFinite(whole);\n        var sign = matches[1].charAt(0) === '-' ? -1 : 1;\n        var num = parseInt(matches[3]);\n        var den = parseInt(matches[5]);\n        var decimal = matches[6];\n        var hasDecimal = isFinite(parseFloat(decimal));\n        var _a = this.unit(fn.trim(matches[7])), unit = _a.unit, rate = _a.rate;\n        if (!hasWhole && hasDecimal) {\n            whole = 0;\n            hasWhole = true;\n        }\n        if (!hasWhole && !unit) {\n            return null;\n        }\n        var value = 1;\n        var valueDen = 1;\n        var valueNum = 1;\n        if (hasWhole) {\n            value = whole;\n            valueNum = whole;\n            if (isFinite(den)) {\n                valueDen = den;\n                if (isFinite(num)) {\n                    value += (num / den) * sign;\n                    valueNum *= den;\n                    valueNum += num;\n                }\n                else {\n                    value /= den;\n                }\n            }\n            else if (hasDecimal) {\n                var remainder = parseFloat('0.' + decimal);\n                value += remainder * sign;\n                valueNum += remainder;\n            }\n            valueNum *= sign;\n        }\n        return { value: value, valueNum: valueNum, valueDen: valueDen, num: num, den: den, unit: unit, rate: rate };\n    };\n    /**\n     * Parses unit input into a [[Rate]].\n     *\n     * *Examples:*\n     * - m/s\n     * - miles per hour\n     * - mph\n     *\n     * @param input The string to parse a unit from.\n     * @return The result of the parsing.\n     */\n    Parse.unit = function (input) {\n        var rate = Rates.get(input);\n        if (!rate) {\n            var units = input.split(this.REGEX_UNIT);\n            rate = {\n                unit: units[0] ? fn.trim(units[0]).replace(/\\.$/, '') : '',\n                rate: units[2] ? fn.trim(units[2]).replace(/\\.$/, '') : ''\n            };\n        }\n        return rate;\n    };\n    /**\n     * The regular expression used to split up a string into multiple ranges.\n     */\n    Parse.REGEX_LIST = /\\s*,\\s*/;\n    /**\n     * The regular expression used to split up a range string to determine the min\n     * and maximum values.\n     */\n    Parse.REGEX_RANGE = /\\s*(-?[^-]+)-(.+)/;\n    /**\n     * The regular expression used to parse a value number or fraction and\n     * possible unit from a string.\n     */\n    Parse.REGEX_PARSE = /^\\s*(-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|)\\s*(.*)\\s*$/i;\n    /**\n     * The regular expression used to split up a unit from a rateUnit.\n     */\n    Parse.REGEX_UNIT = /\\s*(\\/|\\s+per\\s+)\\s*/i;\n    return Parse;\n}());\nexport { Parse };\n//# sourceMappingURL=Parse.js.map","\"use strict\";\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\nvar RAD2DEG = 180 / Math.PI;\nvar DEG2RAD = Math.PI / 180;\n/**\n * @hidden\n */\nexport var Angle = new Class('Angle')\n    .setBaseConversion('deg', 'rad', function (x) { return x * DEG2RAD; })\n    .setBaseConversion('rad', 'deg', function (x) { return x * RAD2DEG; })\n    .addGroups([\n    {\n        system: System.ANY,\n        common: true,\n        unit: 'deg',\n        baseUnit: 'deg',\n        denominators: [],\n        units: {\n            'deg': Plurality.EITHER,\n            '\\xb0': Plurality.EITHER,\n            'degrees': Plurality.PLURAL,\n            'degree': Plurality.SINGULAR\n        }\n    },\n    {\n        system: System.ANY,\n        common: true,\n        unit: 'rad',\n        baseUnit: 'rad',\n        denominators: [],\n        units: {\n            'rad': Plurality.EITHER,\n            'radians': Plurality.PLURAL,\n            'radian': Plurality.SINGULAR\n        }\n    }\n])\n    .setClassScales();\n//# sourceMappingURL=Angle.js.map","\"use strict\";\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n/**\n * @hidden\n */\nexport var Area = new Class('Area')\n    .setBaseConversion('sqin', 'sqmm', function (x) { return x * 645.16; })\n    .setBaseConversion('sqmm', 'sqin', function (x) { return x * 0.00155; })\n    .addGroups([\n    {\n        system: System.US,\n        common: true,\n        unit: 'sqin',\n        baseUnit: 'sqin',\n        denominators: [2, 4, 8, 16],\n        units: {\n            'sqin': Plurality.EITHER,\n            'sq. in': Plurality.EITHER,\n            'sq in': Plurality.EITHER,\n            'in2': Plurality.EITHER,\n            'in^2': Plurality.EITHER,\n            'in\\xb2': Plurality.EITHER,\n            'inch2': Plurality.SINGULAR,\n            'inch^2': Plurality.SINGULAR,\n            'inch\\xb2': Plurality.SINGULAR,\n            'inches2': Plurality.PLURAL,\n            'inches^2': Plurality.PLURAL,\n            'inches\\xb2': Plurality.PLURAL,\n            'square in': Plurality.EITHER,\n            'square inch': Plurality.SINGULAR,\n            'square inches': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.US,\n        common: true,\n        unit: 'sqft',\n        relativeUnit: 'sqin',\n        relativeScale: 12 * 12,\n        denominators: [2, 4, 8, 16],\n        units: {\n            'sqft': Plurality.EITHER,\n            'sq. ft': Plurality.EITHER,\n            'sq ft': Plurality.EITHER,\n            'ft2': Plurality.EITHER,\n            'ft^2': Plurality.EITHER,\n            'ft\\xb2': Plurality.EITHER,\n            'foot2': Plurality.SINGULAR,\n            'foot^2': Plurality.SINGULAR,\n            'foot\\xb2': Plurality.SINGULAR,\n            'feet2': Plurality.PLURAL,\n            'feet^2': Plurality.PLURAL,\n            'feet\\xb2': Plurality.PLURAL,\n            'square ft': Plurality.EITHER,\n            'square foot': Plurality.SINGULAR,\n            'square feet': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.US,\n        unit: 'sqyd',\n        relativeUnit: 'sqft',\n        relativeScale: 3 * 3,\n        denominators: [2, 3, 4, 8, 9, 16],\n        units: {\n            'sqyd': Plurality.EITHER,\n            'sq. yd': Plurality.EITHER,\n            'sq yd': Plurality.EITHER,\n            'yd2': Plurality.EITHER,\n            'yd^2': Plurality.EITHER,\n            'yd\\xb2': Plurality.EITHER,\n            'yard2': Plurality.SINGULAR,\n            'yard^2': Plurality.SINGULAR,\n            'yard\\xb2': Plurality.SINGULAR,\n            'yards2': Plurality.PLURAL,\n            'yards^2': Plurality.PLURAL,\n            'yards\\xb2': Plurality.PLURAL,\n            'square yd': Plurality.EITHER,\n            'square yard': Plurality.SINGULAR,\n            'square yards': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.US,\n        common: true,\n        unit: 'acre',\n        relativeUnit: 'sqyd',\n        relativeScale: 4840,\n        denominators: [2, 3, 4, 8, 10],\n        units: {\n            'acre': Plurality.EITHER,\n            'acres': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.US,\n        common: true,\n        unit: 'sqmi',\n        relativeUnit: 'acre',\n        relativeScale: 640,\n        denominators: [2, 3, 4, 8, 10],\n        units: {\n            'sqmi': Plurality.EITHER,\n            'sq. mi': Plurality.EITHER,\n            'sq mi': Plurality.EITHER,\n            'mi2': Plurality.EITHER,\n            'mi^2': Plurality.EITHER,\n            'mi\\xb2': Plurality.EITHER,\n            'mile2': Plurality.SINGULAR,\n            'mile^2': Plurality.SINGULAR,\n            'mile\\xb2': Plurality.SINGULAR,\n            'miles2': Plurality.PLURAL,\n            'miles^2': Plurality.PLURAL,\n            'miles\\xb2': Plurality.PLURAL,\n            'square mi': Plurality.EITHER,\n            'square mile': Plurality.SINGULAR,\n            'square miles': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        common: true,\n        unit: 'sqmm',\n        baseUnit: 'sqmm',\n        denominators: [2, 4, 8, 16],\n        units: {\n            'sqmm': Plurality.EITHER,\n            'sq. mm': Plurality.EITHER,\n            'sq mm': Plurality.EITHER,\n            'mm2': Plurality.EITHER,\n            'mm^2': Plurality.EITHER,\n            'mm\\xb2': Plurality.EITHER,\n            'millimeter2': Plurality.SINGULAR,\n            'millimeter^2': Plurality.SINGULAR,\n            'millimeter\\xb2': Plurality.SINGULAR,\n            'millimeters2': Plurality.PLURAL,\n            'millimeters^2': Plurality.PLURAL,\n            'millimeters\\xb2': Plurality.PLURAL,\n            'square mm': Plurality.EITHER,\n            'square millimeter': Plurality.SINGULAR,\n            'square millimeters': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        common: true,\n        unit: 'sqcm',\n        relativeUnit: 'sqmm',\n        relativeScale: 100,\n        denominators: [2, 4, 8, 16],\n        units: {\n            'sqcm': Plurality.EITHER,\n            'sq. cm': Plurality.EITHER,\n            'sq cm': Plurality.EITHER,\n            'cm2': Plurality.EITHER,\n            'cm^2': Plurality.EITHER,\n            'cm\\xb2': Plurality.EITHER,\n            'centimeter2': Plurality.SINGULAR,\n            'centimeter^2': Plurality.SINGULAR,\n            'centimeter\\xb2': Plurality.SINGULAR,\n            'centimeters2': Plurality.PLURAL,\n            'centimeters^2': Plurality.PLURAL,\n            'centimeters\\xb2': Plurality.PLURAL,\n            'square cm': Plurality.EITHER,\n            'square centimeter': Plurality.SINGULAR,\n            'square centimeters': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        common: true,\n        unit: 'sqm',\n        relativeUnit: 'sqcm',\n        relativeScale: 10000,\n        denominators: [2, 4, 8, 16],\n        units: {\n            'sqm': Plurality.EITHER,\n            'sq. m': Plurality.EITHER,\n            'sq m': Plurality.EITHER,\n            'm2': Plurality.EITHER,\n            'm^2': Plurality.EITHER,\n            'm\\xb2': Plurality.EITHER,\n            'meter2': Plurality.SINGULAR,\n            'meter^2': Plurality.SINGULAR,\n            'meter\\xb2': Plurality.SINGULAR,\n            'meters2': Plurality.PLURAL,\n            'meters^2': Plurality.PLURAL,\n            'meters\\xb2': Plurality.PLURAL,\n            'square m': Plurality.EITHER,\n            'square meter': Plurality.SINGULAR,\n            'square meters': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        common: true,\n        unit: 'sqkm',\n        relativeUnit: 'sqm',\n        relativeScale: 1000000,\n        denominators: [2, 4, 8, 16],\n        units: {\n            'sqkm': Plurality.EITHER,\n            'sq. km': Plurality.EITHER,\n            'sq km': Plurality.EITHER,\n            'km2': Plurality.EITHER,\n            'km^2': Plurality.EITHER,\n            'km\\xb2': Plurality.EITHER,\n            'kilometer2': Plurality.SINGULAR,\n            'kilometer^2': Plurality.SINGULAR,\n            'kilometer\\xb2': Plurality.SINGULAR,\n            'kilometers2': Plurality.PLURAL,\n            'kilometers^2': Plurality.PLURAL,\n            'kilometers\\xb2': Plurality.PLURAL,\n            'square km': Plurality.EITHER,\n            'square kilometer': Plurality.SINGULAR,\n            'square kilometers': Plurality.PLURAL\n        }\n    }\n])\n    .setClassScales();\n//# sourceMappingURL=Area.js.map","\"use strict\";\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n/**\n * @hidden\n */\nexport var Digital = new Class('Digital')\n    .addGroups([\n    {\n        system: System.ANY,\n        common: true,\n        unit: 'b',\n        baseUnit: 'b',\n        denominators: [],\n        units: {\n            'b': Plurality.EITHER,\n            'bit': Plurality.SINGULAR,\n            'bits': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.ANY,\n        unit: 'nibble',\n        relativeUnit: 'b',\n        relativeScale: 4,\n        denominators: [],\n        units: {\n            'nibble': Plurality.EITHER,\n            'nibbles': Plurality.PLURAL,\n            'nybble': Plurality.EITHER,\n            'nyble': Plurality.EITHER,\n            'half-byte': Plurality.EITHER,\n            'half byte': Plurality.EITHER,\n            'tetrade': Plurality.EITHER,\n            'semi-octet': Plurality.EITHER,\n            'quadbit': Plurality.EITHER,\n            'quartet': Plurality.EITHER\n        }\n    },\n    {\n        system: System.ANY,\n        common: true,\n        unit: 'B',\n        relativeUnit: 'b',\n        relativeScale: 8,\n        denominators: [2, 8],\n        units: {\n            'B': Plurality.EITHER,\n            'byte': Plurality.SINGULAR,\n            'bytes': Plurality.PLURAL\n        }\n    }\n]);\naddDigitalUnits(Digital, 'B', 1000, [2, 4, 5, 10], 'byte', 'bytes', [\n    ['kB', 'kilo'],\n    ['mB', 'mega'],\n    ['gB', 'giga'],\n    ['tB', 'tera'],\n    ['pB', 'peta'],\n    ['eB', 'exa'],\n    ['zB', 'zetta'],\n    ['yB', 'yotta']\n]);\naddDigitalUnits(Digital, 'B', 1024, [2, 4, 8, 16], 'byte', 'bytes', [\n    ['KB', 'kibi'],\n    ['MB', 'mebi'],\n    ['GB', 'gibi'],\n    ['TB', 'tebi'],\n    ['PB', 'pebi'],\n    ['EB', 'exbi'],\n    ['ZB', 'zebi'],\n    ['YB', 'yobi']\n]);\naddDigitalUnits(Digital, 'b', 1000, [2, 4, 5, 10], 'bit', 'bits', [\n    ['kb', 'kilo', 'kbit'],\n    ['mb', 'mega', 'mbit'],\n    ['gb', 'giga', 'gbit'],\n    ['tb', 'tera', 'tbit'],\n    ['pb', 'peta', 'pbit'],\n    ['eb', 'exa', 'ebit'],\n    ['zb', 'zetta', 'zbit'],\n    ['yb', 'yotta', 'ybit']\n]);\naddDigitalUnits(Digital, 'b', 1024, [2, 4, 8, 16], 'bit', 'bits', [\n    ['kibit', 'kibi'],\n    ['mibit', 'mebi'],\n    ['gibit', 'gibi'],\n    ['tibit', 'tebi'],\n    ['pibit', 'pebi'],\n    ['eibit', 'exbi'],\n    ['zibit', 'zebi'],\n    ['yibit', 'yobi']\n]);\nDigital.setClassScales();\nfunction addDigitalUnits(parent, relativeTo, relativeScales, denominators, suffixSingular, suffixPlural, unitAndPrefixes) {\n    for (var i = 0; i < unitAndPrefixes.length; i++) {\n        var _a = unitAndPrefixes[i], unit = _a[0], prefix = _a[1], extra = _a[2];\n        var units = {};\n        units[unit] = Plurality.EITHER;\n        units[prefix + suffixSingular] = Plurality.SINGULAR;\n        units[prefix + suffixPlural] = Plurality.PLURAL;\n        if (extra) {\n            units[extra] = Plurality.EITHER;\n        }\n        parent.addGroup({\n            system: System.ANY,\n            common: true,\n            unit: unit,\n            relativeUnit: relativeTo,\n            relativeScale: relativeScales,\n            denominators: denominators,\n            units: units\n        });\n        relativeTo = unit;\n    }\n}\n//# sourceMappingURL=Digital.js.map","\"use strict\";\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n/**\n * @hidden\n */\nexport var Length = new Class('Length')\n    .setBaseConversion('in', 'mm', function (x) { return x * 25.4; })\n    .setBaseConversion('mm', 'in', function (x) { return x * 0.039370; })\n    .addGroups([\n    {\n        system: System.US,\n        common: true,\n        unit: 'in',\n        baseUnit: 'in',\n        denominators: [2, 4, 8, 16, 32],\n        units: {\n            'in': Plurality.EITHER,\n            'inch': Plurality.SINGULAR,\n            'inches': Plurality.PLURAL,\n            '\"': Plurality.EITHER\n        }\n    },\n    {\n        system: System.US,\n        common: true,\n        unit: 'ft',\n        relativeUnit: 'in',\n        relativeScale: 12,\n        denominators: [2],\n        units: {\n            'ft': Plurality.EITHER,\n            'foot': Plurality.SINGULAR,\n            'feet': Plurality.PLURAL,\n            '\\'': Plurality.EITHER\n        }\n    },\n    {\n        system: System.US,\n        unit: 'yd',\n        relativeUnit: 'ft',\n        relativeScale: 3,\n        denominators: [],\n        units: {\n            'yd': Plurality.EITHER,\n            'yard': Plurality.SINGULAR,\n            'yards': Plurality.PLURAL,\n            'yds': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.US,\n        common: true,\n        unit: 'mi',\n        relativeUnit: 'ft',\n        relativeScale: 5280,\n        denominators: [2, 3, 4, 10],\n        units: {\n            'mi': Plurality.EITHER,\n            'mile': Plurality.SINGULAR,\n            'miles': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.US,\n        unit: 'league',\n        relativeUnit: 'mi',\n        relativeScale: 3,\n        denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\n        units: {\n            'league': Plurality.EITHER,\n            'leagues': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        common: true,\n        unit: 'mm',\n        baseUnit: 'mm',\n        denominators: [10],\n        units: {\n            'mm': Plurality.EITHER,\n            'millimeter': Plurality.SINGULAR,\n            'millimeters': Plurality.PLURAL,\n            'millimetre': Plurality.SINGULAR,\n            'millimetres': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        common: true,\n        unit: 'cm',\n        relativeUnit: 'mm',\n        relativeScale: 10,\n        denominators: [2, 4, 10],\n        units: {\n            'cm': Plurality.EITHER,\n            'centimeter': Plurality.SINGULAR,\n            'centimeters': Plurality.PLURAL,\n            'centimetre': Plurality.SINGULAR,\n            'centimetres': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        unit: 'dc',\n        relativeUnit: 'cm',\n        relativeScale: 10,\n        denominators: [10],\n        units: {\n            'dc': Plurality.EITHER,\n            'decimeter': Plurality.SINGULAR,\n            'decimeters': Plurality.PLURAL,\n            'decimetre': Plurality.SINGULAR,\n            'decimetres': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        common: true,\n        unit: 'm',\n        relativeUnit: 'cm',\n        relativeScale: 100,\n        denominators: [2, 3, 4, 5, 10],\n        units: {\n            'm': Plurality.EITHER,\n            'meter': Plurality.SINGULAR,\n            'meters': Plurality.PLURAL,\n            'metre': Plurality.SINGULAR,\n            'metres': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        common: true,\n        unit: 'km',\n        relativeUnit: 'm',\n        relativeScale: 1000,\n        denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\n        units: {\n            'km': Plurality.EITHER,\n            'kms': Plurality.PLURAL,\n            'kilometer': Plurality.SINGULAR,\n            'kilometers': Plurality.PLURAL,\n            'kilometre': Plurality.SINGULAR,\n            'kilometres': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        unit: 'nm',\n        relativeUnit: 'm',\n        relativeScale: 1852,\n        denominators: [2, 3, 4, 5, 10],\n        units: {\n            'nm': Plurality.EITHER,\n            'nmi': Plurality.EITHER,\n            'nautical mi': Plurality.EITHER,\n            'nautical mile': Plurality.SINGULAR,\n            'nautical miles': Plurality.PLURAL\n        }\n    }\n])\n    .setClassScales();\n//# sourceMappingURL=Length.js.map","\"use strict\";\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\nvar _C_ = '\\xb0C';\n/**\n * @hidden\n */\nexport var Temperature = new Class('Temperature')\n    .setBaseConversion('F', _C_, function (x) { return ((x - 32) * 5 / 9); })\n    .setBaseConversion('F', 'K', function (x) { return ((x + 459.67) * 5 / 9); })\n    .setBaseConversion(_C_, 'F', function (x) { return ((x * 9 / 5) + 32); })\n    .setBaseConversion(_C_, 'K', function (x) { return (x + 273.15); })\n    .setBaseConversion('K', _C_, function (x) { return (x - 273.15); })\n    .setBaseConversion('K', 'F', function (x) { return ((x * 9 / 5) - 459.67); })\n    .addGroups([\n    {\n        system: System.US,\n        common: true,\n        unit: 'F',\n        baseUnit: 'F',\n        denominators: [],\n        units: {\n            'F': Plurality.EITHER,\n            '\\xb0F': Plurality.EITHER,\n            'Fahrenheit': Plurality.EITHER\n        }\n    },\n    {\n        system: System.METRIC,\n        common: true,\n        unit: _C_,\n        baseUnit: _C_,\n        denominators: [],\n        units: {\n            '\\xb0C': Plurality.EITHER,\n            'Celsius': Plurality.EITHER\n        }\n    },\n    {\n        system: System.METRIC,\n        unit: 'K',\n        baseUnit: 'K',\n        denominators: [],\n        units: {\n            'K': Plurality.EITHER,\n            'kelvin': Plurality.SINGULAR,\n            'kelvins': Plurality.PLURAL\n        }\n    }\n])\n    .setClassScales();\n//# sourceMappingURL=Temperature.js.map","\"use strict\";\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n/**\n * @hidden\n */\nexport var Time = new Class('Time')\n    .addGroups([\n    {\n        system: System.ANY,\n        unit: 'ns',\n        baseUnit: 'ns',\n        denominators: [10, 100],\n        units: {\n            'ns': Plurality.EITHER,\n            'nanosecond': Plurality.SINGULAR,\n            'nanoseconds': Plurality.PLURAL,\n            'nano': Plurality.SINGULAR,\n            'nanos': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.ANY,\n        unit: 'us',\n        relativeUnit: 'ns',\n        relativeScale: 1000,\n        denominators: [10, 100, 1000],\n        units: {\n            'us': Plurality.EITHER,\n            'microsecond': Plurality.SINGULAR,\n            'microseconds': Plurality.PLURAL,\n            'micro': Plurality.SINGULAR,\n            'micros': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.ANY,\n        common: true,\n        unit: 'ms',\n        relativeUnit: 'us',\n        relativeScale: 1000,\n        denominators: [10, 100, 1000],\n        units: {\n            'ms': Plurality.EITHER,\n            'millisecond': Plurality.SINGULAR,\n            'milliseconds': Plurality.PLURAL,\n            'milli': Plurality.SINGULAR,\n            'millis': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.ANY,\n        common: true,\n        unit: 's',\n        relativeUnit: 'ms',\n        relativeScale: 1000,\n        denominators: [10, 100, 1000],\n        units: {\n            's': Plurality.EITHER,\n            'second': Plurality.SINGULAR,\n            'seconds': Plurality.PLURAL,\n            'sec': Plurality.SINGULAR,\n            'secs': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.ANY,\n        common: true,\n        unit: 'min',\n        relativeUnit: 's',\n        relativeScale: 60,\n        denominators: [2, 3, 4, 60],\n        units: {\n            'min': Plurality.EITHER,\n            'minute': Plurality.SINGULAR,\n            'minutes': Plurality.PLURAL,\n            'mins': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.ANY,\n        common: true,\n        unit: 'hr',\n        relativeUnit: 'min',\n        relativeScale: 60,\n        denominators: [2, 3, 4, 60],\n        units: {\n            'hr': Plurality.EITHER,\n            'hour': Plurality.SINGULAR,\n            'hours': Plurality.PLURAL,\n            'hrs': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.ANY,\n        common: true,\n        unit: 'day',\n        relativeUnit: 'hr',\n        relativeScale: 24,\n        denominators: [2, 3, 4, 6, 24],\n        units: {\n            'day': Plurality.EITHER,\n            'days': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.ANY,\n        common: true,\n        unit: 'wk',\n        relativeUnit: 'day',\n        relativeScale: 7,\n        denominators: [7],\n        units: {\n            'wk': Plurality.EITHER,\n            'week': Plurality.SINGULAR,\n            'weeks': Plurality.PLURAL,\n            'wks': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.ANY,\n        common: true,\n        unit: 'yr',\n        relativeUnit: 'day',\n        relativeScale: 365.2425,\n        denominators: [2, 3, 4, 6, 12, 52],\n        units: {\n            'yr': Plurality.EITHER,\n            'year': Plurality.SINGULAR,\n            'years': Plurality.PLURAL,\n            'yrs': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.ANY,\n        common: true,\n        unit: 'score',\n        relativeUnit: 'yr',\n        relativeScale: 20,\n        denominators: [20],\n        units: {\n            'score': Plurality.EITHER\n        }\n    },\n    {\n        system: System.ANY,\n        unit: 'biennium',\n        relativeUnit: 'yr',\n        relativeScale: 2,\n        denominators: [],\n        units: {\n            'biennium': Plurality.EITHER,\n            'bienniums': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.ANY,\n        unit: 'triennium',\n        relativeUnit: 'yr',\n        relativeScale: 3,\n        denominators: [],\n        units: {\n            'triennium': Plurality.EITHER,\n            'trienniums': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.ANY,\n        unit: 'quadrennium',\n        relativeUnit: 'yr',\n        relativeScale: 4,\n        denominators: [],\n        units: {\n            'quadrennium': Plurality.EITHER,\n            'quadrenniums': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.ANY,\n        unit: 'lustrum',\n        relativeUnit: 'yr',\n        relativeScale: 5,\n        denominators: [],\n        units: {\n            'lustrum': Plurality.EITHER,\n            'lustrums': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.ANY,\n        common: true,\n        unit: 'decade',\n        relativeUnit: 'yr',\n        relativeScale: 10,\n        denominators: [2, 10],\n        units: {\n            'decade': Plurality.EITHER,\n            'decades': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.ANY,\n        common: true,\n        unit: 'century',\n        relativeUnit: 'yr',\n        relativeScale: 100,\n        denominators: [2, 10],\n        units: {\n            'century': Plurality.EITHER,\n            'centurys': Plurality.PLURAL,\n            'centuries': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.ANY,\n        common: true,\n        unit: 'millennium',\n        relativeUnit: 'yr',\n        relativeScale: 1000,\n        denominators: [2, 3, 4],\n        units: {\n            'millennium': Plurality.EITHER,\n            'millenniums': Plurality.PLURAL,\n            'millennia': Plurality.PLURAL,\n            'millennias': Plurality.PLURAL\n        }\n    }\n])\n    .setClassScales();\n//# sourceMappingURL=Time.js.map","\"use strict\";\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n/**\n * @hidden\n */\nexport var Volume = new Class('Volume')\n    .setBaseConversion('tsp', 'ml', function (x) { return x * 4.92892; })\n    .setBaseConversion('tsp', 'mm3', function (x) { return x * 4928.92; })\n    .setBaseConversion('tsp', 'in3', function (x) { return x * 0.300781; })\n    .setBaseConversion('ml', 'tsp', function (x) { return x * 0.202884; })\n    .setBaseConversion('ml', 'mm3', function (x) { return x * 1000; })\n    .setBaseConversion('ml', 'in3', function (x) { return x * 0.0610237; })\n    .setBaseConversion('mm3', 'tsp', function (x) { return x * 0.000202884; })\n    .setBaseConversion('mm3', 'ml', function (x) { return x * 0.001; })\n    .setBaseConversion('mm3', 'in3', function (x) { return x * 0.0000610237; })\n    .setBaseConversion('in3', 'tsp', function (x) { return x * 3.32468; })\n    .setBaseConversion('in3', 'ml', function (x) { return x * 16.3871; })\n    .setBaseConversion('in3', 'mm3', function (x) { return x * 16387.1; })\n    .addGroups([\n    {\n        system: System.US,\n        common: true,\n        unit: 'tsp',\n        baseUnit: 'tsp',\n        denominators: [2, 3, 4],\n        units: {\n            'tsp': Plurality.EITHER,\n            'ts': Plurality.EITHER,\n            'tsps': Plurality.PLURAL,\n            'teaspoon': Plurality.SINGULAR,\n            'teaspoons': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.US,\n        common: true,\n        unit: 'tbsp',\n        relativeUnit: 'tsp',\n        relativeScale: 3,\n        denominators: [2, 3, 4],\n        units: {\n            'tbsp': Plurality.EITHER,\n            'tbsps': Plurality.PLURAL,\n            'tablespoon': Plurality.SINGULAR,\n            'tablespoons': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.US,\n        common: true,\n        unit: 'floz',\n        relativeUnit: 'tsp',\n        relativeScale: 6,\n        denominators: [2, 3, 6],\n        units: {\n            // 'oz': Plurality.EITHER,\n            // 'ounce': Plurality.SINGULAR,\n            // 'ounces': Plurality.PLURAL,\n            'floz': Plurality.EITHER,\n            'fl-oz': Plurality.EITHER,\n            'fl oz': Plurality.EITHER,\n            'fluid ounce': Plurality.SINGULAR,\n            'fluid ounces': Plurality.PLURAL,\n            'fl. oz': Plurality.EITHER,\n            'oz. fl': Plurality.EITHER,\n            'oz fl': Plurality.EITHER\n        }\n    },\n    {\n        system: System.US,\n        common: true,\n        unit: 'c',\n        relativeUnit: 'floz',\n        relativeScale: 8,\n        denominators: [2, 3, 4],\n        units: {\n            'c': Plurality.EITHER,\n            'cup': Plurality.SINGULAR,\n            'cups': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.US,\n        common: true,\n        unit: 'pt',\n        relativeUnit: 'c',\n        relativeScale: 2,\n        denominators: [2, 4, 8],\n        units: {\n            'pt': Plurality.EITHER,\n            'pint': Plurality.SINGULAR,\n            'pints': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.US,\n        common: true,\n        unit: 'qt',\n        relativeUnit: 'c',\n        relativeScale: 4,\n        denominators: [2, 4, 8],\n        units: {\n            'qt': Plurality.EITHER,\n            'quart': Plurality.SINGULAR,\n            'quarts': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.US,\n        common: true,\n        unit: 'gal',\n        relativeUnit: 'qt',\n        relativeScale: 4,\n        denominators: [2, 4, 8, 16],\n        units: {\n            'gal': Plurality.EITHER,\n            'gallon': Plurality.SINGULAR,\n            'gallons': Plurality.PLURAL,\n            'gals': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        common: true,\n        unit: 'ml',\n        baseUnit: 'ml',\n        denominators: [2, 10],\n        units: {\n            'ml': Plurality.EITHER,\n            'millilitre': Plurality.SINGULAR,\n            'millilitres': Plurality.PLURAL,\n            'milliliter': Plurality.SINGULAR,\n            'milliliters': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        unit: 'cl',\n        relativeUnit: 'ml',\n        relativeScale: 10,\n        denominators: [10],\n        units: {\n            'cl': Plurality.EITHER,\n            'centilitre': Plurality.SINGULAR,\n            'centilitres': Plurality.PLURAL,\n            'centiliter': Plurality.SINGULAR,\n            'centiliters': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        common: true,\n        unit: 'l',\n        relativeUnit: 'ml',\n        relativeScale: 1000,\n        denominators: [2, 3, 4, 10],\n        units: {\n            'l': Plurality.EITHER,\n            'litre': Plurality.SINGULAR,\n            'litres': Plurality.PLURAL,\n            'liter': Plurality.SINGULAR,\n            'liters': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        unit: 'dl',\n        relativeUnit: 'l',\n        relativeScale: 10,\n        denominators: [10, 100],\n        units: {\n            'dl': Plurality.EITHER,\n            'decalitre': Plurality.SINGULAR,\n            'decalitres': Plurality.PLURAL,\n            'decaliter': Plurality.SINGULAR,\n            'decaliters': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        common: true,\n        unit: 'kl',\n        relativeUnit: 'l',\n        relativeScale: 1000,\n        denominators: [10, 100],\n        units: {\n            'kl': Plurality.EITHER,\n            'kilolitre': Plurality.SINGULAR,\n            'kilolitres': Plurality.PLURAL,\n            'kiloliter': Plurality.SINGULAR,\n            'kiloliters': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        unit: 'mm3',\n        baseUnit: 'mm3',\n        denominators: [2, 4, 8],\n        units: {\n            'mm3': Plurality.EITHER,\n            'mm^3': Plurality.EITHER,\n            'mm\\xb3': Plurality.EITHER,\n            'millimeter3': Plurality.SINGULAR,\n            'millimeter^3': Plurality.SINGULAR,\n            'millimeter\\xb3': Plurality.SINGULAR,\n            'millimeters3': Plurality.PLURAL,\n            'millimeters^3': Plurality.PLURAL,\n            'millimeters\\xb3': Plurality.PLURAL,\n            'cubic mm': Plurality.EITHER,\n            'cubic millimeter': Plurality.SINGULAR,\n            'cubic millimeters': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        unit: 'cm3',\n        relativeUnit: 'mm3',\n        relativeScale: 1000,\n        denominators: [2, 4, 8],\n        units: {\n            'cm3': Plurality.EITHER,\n            'cm^3': Plurality.EITHER,\n            'cm\\xb3': Plurality.EITHER,\n            'centimeter3': Plurality.SINGULAR,\n            'centimeter^3': Plurality.SINGULAR,\n            'centimeter\\xb3': Plurality.SINGULAR,\n            'centimeters3': Plurality.PLURAL,\n            'centimeters^3': Plurality.PLURAL,\n            'centimeters\\xb3': Plurality.PLURAL,\n            'cubic cm': Plurality.EITHER,\n            'cubic centimeter': Plurality.SINGULAR,\n            'cubic centimeters': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        unit: 'm3',\n        relativeUnit: 'cm3',\n        relativeScale: 1000000,\n        denominators: [2, 4, 8],\n        units: {\n            'm3': Plurality.EITHER,\n            'm^3': Plurality.EITHER,\n            'm\\xb3': Plurality.EITHER,\n            'meter3': Plurality.SINGULAR,\n            'meter^3': Plurality.SINGULAR,\n            'meter\\xb3': Plurality.SINGULAR,\n            'meters3': Plurality.PLURAL,\n            'meters^3': Plurality.PLURAL,\n            'meters\\xb3': Plurality.PLURAL,\n            'cubic m': Plurality.EITHER,\n            'cubic meter': Plurality.SINGULAR,\n            'cubic meters': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        unit: 'km3',\n        relativeUnit: 'm3',\n        relativeScale: 1000000000,\n        denominators: [2, 4, 8],\n        units: {\n            'km3': Plurality.EITHER,\n            'km^3': Plurality.EITHER,\n            'km\\xb3': Plurality.EITHER,\n            'kilometer3': Plurality.SINGULAR,\n            'kilometer^3': Plurality.SINGULAR,\n            'kilometer\\xb3': Plurality.SINGULAR,\n            'kilometers3': Plurality.PLURAL,\n            'kilometers^3': Plurality.PLURAL,\n            'kilometers\\xb3': Plurality.PLURAL,\n            'cubic km': Plurality.EITHER,\n            'cubic kilometer': Plurality.SINGULAR,\n            'cubic kilometers': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.US,\n        unit: 'in3',\n        baseUnit: 'in3',\n        denominators: [2, 4, 8],\n        units: {\n            'in3': Plurality.EITHER,\n            'in^3': Plurality.EITHER,\n            'in\\xb3': Plurality.EITHER,\n            'inch3': Plurality.SINGULAR,\n            'inch^3': Plurality.SINGULAR,\n            'inch\\xb3': Plurality.SINGULAR,\n            'inches3': Plurality.PLURAL,\n            'inches^3': Plurality.PLURAL,\n            'inches\\xb3': Plurality.PLURAL,\n            'cubic in': Plurality.EITHER,\n            'cubic inch': Plurality.SINGULAR,\n            'cubic inches': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        unit: 'ft3',\n        relativeUnit: 'in3',\n        relativeScale: 1728,\n        denominators: [2, 4, 8],\n        units: {\n            'ft3': Plurality.EITHER,\n            'ft^3': Plurality.EITHER,\n            'ft\\xb3': Plurality.EITHER,\n            'foot3': Plurality.SINGULAR,\n            'foot^3': Plurality.SINGULAR,\n            'foot\\xb3': Plurality.SINGULAR,\n            'feet3': Plurality.PLURAL,\n            'feet^3': Plurality.PLURAL,\n            'feet\\xb3': Plurality.PLURAL,\n            'cubic ft': Plurality.EITHER,\n            'cubic foot': Plurality.SINGULAR,\n            'cubic feet': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        unit: 'yd3',\n        relativeUnit: 'ft3',\n        relativeScale: 27,\n        denominators: [2, 4, 8],\n        units: {\n            'yd3': Plurality.EITHER,\n            'yd^3': Plurality.EITHER,\n            'yd\\xb3': Plurality.EITHER,\n            'yard3': Plurality.SINGULAR,\n            'yard^3': Plurality.SINGULAR,\n            'yard\\xb3': Plurality.SINGULAR,\n            'yards3': Plurality.PLURAL,\n            'yards^3': Plurality.PLURAL,\n            'yards\\xb3': Plurality.PLURAL,\n            'cubic yd': Plurality.EITHER,\n            'cubic yard': Plurality.SINGULAR,\n            'cubic yards': Plurality.PLURAL\n        }\n    }\n])\n    .setClassScales();\n//# sourceMappingURL=Volume.js.map","\"use strict\";\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n/**\n * @hidden\n */\nexport var Weight = new Class('Weight')\n    .setBaseConversion('mg', 'oz', function (x) { return x * 0.000035274; })\n    .setBaseConversion('oz', 'mg', function (x) { return x * 28349.5; })\n    .addGroups([\n    {\n        system: System.METRIC,\n        common: true,\n        unit: 'mg',\n        baseUnit: 'mg',\n        denominators: [2, 10],\n        units: {\n            'mg': Plurality.EITHER,\n            'milligram': Plurality.SINGULAR,\n            'milligrams': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        common: true,\n        unit: 'g',\n        relativeUnit: 'mg',\n        relativeScale: 1000,\n        denominators: [2, 10, 1000],\n        units: {\n            'g': Plurality.EITHER,\n            'gram': Plurality.SINGULAR,\n            'grams': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.METRIC,\n        common: true,\n        unit: 'kg',\n        relativeUnit: 'g',\n        relativeScale: 1000,\n        denominators: [2, 10, 1000],\n        units: {\n            'kg': Plurality.EITHER,\n            'kilo': Plurality.SINGULAR,\n            'kilos': Plurality.PLURAL,\n            'kilogram': Plurality.SINGULAR,\n            'kilograms': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.US,\n        common: true,\n        unit: 'oz',\n        baseUnit: 'oz',\n        denominators: [2, 3, 4, 16],\n        units: {\n            'oz': Plurality.EITHER,\n            'ounce': Plurality.SINGULAR,\n            'ounces': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.US,\n        common: true,\n        unit: 'lb',\n        relativeUnit: 'oz',\n        relativeScale: 16,\n        denominators: [2, 3, 4, 16],\n        units: {\n            'lb': Plurality.EITHER,\n            'lbs': Plurality.PLURAL,\n            'pound': Plurality.SINGULAR,\n            'pounds': Plurality.PLURAL\n        }\n    },\n    {\n        system: System.US,\n        common: true,\n        unit: 'ton',\n        relativeUnit: 'lb',\n        relativeScale: 2000,\n        denominators: [2, 3, 4, 10],\n        units: {\n            'ton': Plurality.EITHER,\n            'tonne': Plurality.SINGULAR,\n            'tons': Plurality.PLURAL,\n            'tonnes': Plurality.PLURAL\n        }\n    }\n])\n    .setClassScales();\n//# sourceMappingURL=Weight.js.map","\"use strict\";\nimport { Core } from './Core';\nimport { Angle } from './classes/Angle';\nimport { Area } from './classes/Area';\nimport { Digital } from './classes/Digital';\nimport { Length } from './classes/Length';\nimport { Temperature } from './classes/Temperature';\nimport { Time } from './classes/Time';\nimport { Volume } from './classes/Volume';\nimport { Weight } from './classes/Weight';\n/**\n * The class which keeps a reference to the [[Class]] instances available in\n * this library.\n */\nvar Classes = (function () {\n    function Classes() {\n    }\n    /**\n     * Adds all classes in the library to be available when parsing units.\n     */\n    Classes.addDefaults = function () {\n        Core.addClasses(Classes.Weight, Classes.Area, Classes.Time, Classes.Digital, Classes.Temperature, Classes.Angle, Classes.Volume, Classes.Length);\n    };\n    /**\n     * The Angle class which contains the following groups.\n     *\n     * - degree\n     * - radian\n     */\n    Classes.Angle = Angle;\n    /**\n     * The Area class which contains the following groups:\n     *\n     * - square inch\n     * - square foot\n     * - square yard\n     * - acre\n     * - square mile\n     * - square millimeter\n     * - square centimeter\n     * - square meter\n     * - square kilometer\n     */\n    Classes.Area = Area;\n    /**\n     * The Digital class which contains the following groups:\n     *\n     * - bit\n     * - nibble\n     * - byte\n     * - kilo/mego/giga/tera/peta/exa/zetta/yotta byte\n     * - kibi/mebi/gibi/tebi/pebi/exbi/zebi/yobi byte\n     * - kilo/mego/giga/tera/peta/exa/zetta/yotta bit\n     * - ki/mi/gi/ti/pi/ez/zi/yi bit\n     */\n    Classes.Digital = Digital;\n    /**\n     * The Length class which contains the following groups.\n     *\n     * - inch\n     * - foot\n     * - yard\n     * - mile\n     * - league\n     * - millimeter\n     * - centimeter\n     * - decimeter\n     * - meter\n     * - kilometer\n     */\n    Classes.Length = Length;\n    /**\n     * The Temperature class which contains the following groups.\n     *\n     * - celsius\n     * - kelvin\n     * - fahrenheit\n     */\n    Classes.Temperature = Temperature;\n    /**\n     * The Time class which contains the following groups.\n     *\n     * - nanosecond\n     * - microsecond\n     * - millisecond\n     * - second\n     * - hour\n     * - day\n     * - week\n     * - year\n     * - score\n     * - biennium\n     * - triennium\n     * - quadrennium\n     * - lustrum\n     * - decade\n     * - centry\n     * - millennium\n     */\n    Classes.Time = Time;\n    /**\n     * The Volume clas which contains the following groups.\n     *\n     * - teaspoon\n     * - tablespoon\n     * - fluid ounce\n     * - cup\n     * - pint\n     * - quart\n     * - gallon\n     * - milliliter\n     * - centiliter\n     * - decaliter\n     * - kiloliter\n     * - cubic millimeter\n     * - cubic centimeter\n     * - cubic meter\n     * - cubic kilometer\n     * - cubic inch\n     * - cubic foot\n     * - cubic yard\n     */\n    Classes.Volume = Volume;\n    /**\n     * The Weight clas which contains the following groups.\n     *\n     * - milligram\n     * - gram\n     * - kilogram\n     * - ounce\n     * - pound\n     * - ton\n     */\n    Classes.Weight = Weight;\n    return Classes;\n}());\nexport { Classes };\n//# sourceMappingURL=Classes.js.map","const Unitz = require('unitz-ts');\n\nUnitz.Classes.addDefaults();\n\nUnitz.Core.addClass(new Unitz.Class('Can', [{\n  system: Unitz.System.ANY,\n  common: true,\n  unit: 'can',\n  baseUnit: 'can',\n  denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\n  units: {\n    'can': Unitz.Plurality.SINGULAR,\n    'cans': Unitz.Plurality.PLURAL,\n  }\n}]));\n\nUnitz.Core.addClass(new Unitz.Class('Package', [{\n  system: Unitz.System.ANY,\n  common: true,\n  unit: 'package',\n  baseUnit: 'package',\n  denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\n  units: {\n    'package': Unitz.Plurality.SINGULAR,\n    'packages': Unitz.Plurality.PLURAL,\n  }\n}]));\n\nUnitz.Core.getGroup('tablespoon').addUnits({\n  'tbs': Unitz.Plurality.SINGULAR\n});\n\nconst unitNames = [].concat.apply([], Object.keys(Unitz.Core.classMap).map(className => Object.keys(Unitz.Core.classMap[className].groupMap)));\n\nmodule.exports = {\n  Unitz,\n  unitNames,\n};\n\n","let fractionjs = require('fraction.js');\nlet unitUtils = require('./units.js');\n\nconst fractionMatchers = { // Regex & replacement value by charcode\n  189: [/ ?\\u00BD/g, ' 1/2'], // ½  \\u00BD;\n  8531: [/ ?\\u2153/g, ' 1/3'], // ⅓  \\u2153;\n  8532: [/ ?\\u2154/g, ' 2/3'], // ⅔  \\u2154;\n  188: [/ ?\\u00BC/g, ' 1/4'], // ¼  \\u00BC;\n  190: [/ ?\\u00BE/g, ' 3/4'], // ¾  \\u00BE;\n  8533: [/ ?\\u2155/g, ' 1/5'], // ⅕  \\u2155;\n  8534: [/ ?\\u2156/g, ' 2/5'], // ⅖  \\u2156;\n  8535: [/ ?\\u2157/g, ' 3/5'], // ⅗  \\u2157;\n  8536: [/ ?\\u2158/g, ' 4/5'], // ⅘  \\u2158;\n  8537: [/ ?\\u2159/g, ' 1/6'], // ⅙  \\u2159;\n  8538: [/ ?\\u215A/g, ' 5/6'], // ⅚  \\u215A;\n  8528: [/ ?\\u2150/g, ' 1/7'], // ⅐  \\u2150;\n  8539: [/ ?\\u215B/g, ' 1/8'], // ⅛  \\u215B;\n  8540: [/ ?\\u215C/g, ' 3/8'], // ⅜  \\u215C;\n  8541: [/ ?\\u215D/g, ' 5/8'], // ⅝  \\u215D;\n  8542: [/ ?\\u215E/g, ' 7/8'], // ⅞  \\u215E;\n  8529: [/ ?\\u2151/g, ' 1/9'], // ⅑  \\u2151;\n  8530: [/ ?\\u2152/g, ' 1/10'], // ⅒ \\u2152;\n};\n\nconst fractionMatchRegexp = new RegExp(Object.keys(fractionMatchers).map(e => fractionMatchers[e]).map(matcher => matcher[0].source).join('|'), 'g');\n\nconst replaceFractionsInText = rawText => {\n  return rawText.replace(fractionMatchRegexp, match => {\n    const matcher = fractionMatchers[match.trim().charCodeAt(0)];\n    return matcher ? matcher[1] : match; // Fallback on original value if not found\n  });\n}\n\n// Starts with [, anything inbetween, ends with ]\nvar headerRegexp = /^\\[.*\\]$/;\n\nconst multipartQuantifierRegexp = / \\+ | plus /;\n\nconst measurementRegexp = /((\\d+ )?\\d+([\\/\\.]\\d+)?((-)|( to )|( - ))(\\d+ )?\\d+([\\/\\.]\\d+)?)|((\\d+ )?\\d+[\\/\\.]\\d+)|\\d+/;\n// TODO: Replace measurementRegexp with this:\n// var measurementRegexp = /(( ?\\d+([\\/\\.]\\d+)?){1,2})(((-)|( to )|( - ))(( ?\\d+([\\/\\.]\\d+)?){1,2}))?/; // Simpler version of above, but has a bug where it removes some spacing\n\nconst quantityRegexp = new RegExp(`(${unitUtils.unitNames.join(\"|\").replace(/[.*+?^${}()[\\]\\\\]/g, '\\\\$&')})s?(\\.)?( |$)`);\n\nconst measurementQuantityRegExp = new RegExp(`^(${measurementRegexp.source}) *(${quantityRegexp.source})?`); // Should always be used with 'i' flag\n\nconst fillerWordsRegexp = /(cubed|peeled|minced|grated|heaped|chopped|about|(slice(s)?)) /;\n\nconst notesRegexp = /\\(.*?\\)/;\n\nfunction stripNotes(ingredient) {\n  return ingredient.replace(new RegExp(notesRegexp, 'g'), '').trim();\n}\n\nfunction getMeasurementsForIngredient(ingredient) {\n  const strippedIngredient = replaceFractionsInText(ingredient);\n\n  return strippedIngredient.split(multipartQuantifierRegexp).map(ingredientPart => {\n    const measurementMatch = stripNotes(ingredientPart)\n      .match(new RegExp(measurementQuantityRegExp.source, 'i'));\n\n    if (measurementMatch) return measurementMatch[0].trim();\n    return null;\n  }).filter(measurement => measurement);\n}\n\nfunction getTitleForIngredient(ingredient) {\n  const strippedIngredient = replaceFractionsInText(ingredient);\n\n  const ingredientPartDelimiters = strippedIngredient.match(new RegExp(multipartQuantifierRegexp, 'ig'));\n\n  return strippedIngredient\n    .split(multipartQuantifierRegexp)\n    .map(ingredientPart => {\n      return stripNotes(ingredientPart).replace(new RegExp(measurementQuantityRegExp, 'i'), \"\");\n    })\n    .reduce((acc, ingredientPart, idx) => acc + ingredientPart + (ingredientPartDelimiters ? ingredientPartDelimiters[idx] || '' : ''), \"\")\n    .trim();\n}\n\nfunction isHeader(input) {\n  return line.match(headerRegexp);\n}\n\nfunction stripIngredient(ingredient) {\n  const trimmed = replaceFractionsInText(ingredient).trim()\n    .replace(new RegExp(`^(${measurementRegexp.source})`), '').trim()\n    .replace(new RegExp(`^(${quantityRegexp.source})`, 'i'), '').trim()\n    .replace(new RegExp(`^(${fillerWordsRegexp.source})`, 'i'), '').trim();\n\n  if (trimmed !== ingredient) {\n    return stripIngredient(trimmed);\n  } else {\n    return trimmed;\n  }\n}\n\nfunction parseIngredients(ingredients, scale, boldify) {\n  if (!ingredients) return [];\n\n  ingredients = replaceFractionsInText(ingredients);\n\n  let lines = ingredients.match(/[^\\r\\n]+/g).map(match => ({\n    content: match,\n    originalContent: match,\n    complete: false,\n    isHeader: false\n  }));\n\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i].content.trim(); // Trim only spaces (no newlines)\n\n    var headerMatches = line.match(headerRegexp);\n\n    const ingredientPartDelimiters = line.match(new RegExp(multipartQuantifierRegexp, 'g')); // Multipart measurements (1 cup + 1 tablespoon)\n    const ingredientParts = line.split(multipartQuantifierRegexp); // Multipart measurements (1 cup + 1 tablespoon)\n    var measurementMatches = ingredientParts.map(linePart => linePart.match(measurementRegexp));\n\n    if (headerMatches && headerMatches.length > 0) {\n      var header = headerMatches[0];\n      var headerContent = header.substring(1, header.length - 1); // Chop off brackets\n\n      if (boldify) headerContent = `<b class=\"sectionHeader\">${headerContent}</b>`;\n      lines[i].content = headerContent;\n      lines[i].isHeader = true;\n    } else if (measurementMatches.find(el => el && el.length > 0)) {\n      const updatedIngredientParts = measurementMatches.map((el, idx) => {\n        if (!el) return ingredientParts[idx];\n\n        try {\n          var measurement = el[0];\n\n          const measurementPartDelimiters = measurement.match(/(-)|( to )|( - )/g);\n          const measurementParts = measurement.split(/-|to/);\n\n          for (var j = 0; j < measurementParts.length; j++) {\n            // console.log(measurementParts[j].trim())\n            var scaledMeasurement = fractionjs(measurementParts[j].trim()).mul(scale);\n\n            // Preserve original fraction format if entered\n            if (measurementParts[j].indexOf('/') > -1) {\n              scaledMeasurement = scaledMeasurement.toFraction(true);\n            }\n\n            if (boldify) measurementParts[j] = '<b class=\"ingredientMeasurement\">' + scaledMeasurement + '</b>';\n            else measurementParts[j] = scaledMeasurement;\n          }\n\n          let updatedMeasurement;\n          if (measurementPartDelimiters) {\n            updatedMeasurement = measurementParts.reduce((acc, measurementPart, idx) => acc + measurementPart + (measurementPartDelimiters[idx] || \"\"), \"\");\n          } else {\n            updatedMeasurement = measurementParts.join(' to ');\n          }\n\n          return ingredientParts[idx].replace(measurementRegexp, updatedMeasurement);\n        } catch (e) {\n          console.error(\"failed to parse\", e)\n          return ingredientParts[idx];\n        }\n      });\n\n      if (ingredientPartDelimiters) {\n        lines[i].content = updatedIngredientParts.reduce((acc, ingredientPart, idx) => acc + ingredientPart + (ingredientPartDelimiters[idx] || \"\"), \"\");\n      } else {\n        lines[i].content = updatedIngredientParts.join(\" + \");\n      }\n\n      lines[i].isHeader = false;\n\n    }\n  }\n\n  return lines;\n}\n\nfunction parseInstructions(instructions) {\n  instructions = replaceFractionsInText(instructions);\n\n  // Starts with [, anything inbetween, ends with ]\n  var headerRegexp = /^\\[.*\\]$/;\n\n  let stepCount = 1;\n  return instructions.split(/\\r?\\n/).map(instruction => {\n    let line = instruction.trim();\n    var headerMatches = line.match(headerRegexp);\n\n    if (headerMatches && headerMatches.length > 0) {\n      var header = headerMatches[0];\n      var headerContent = header.substring(1, header.length - 1); // Chop off brackets\n\n      stepCount = 1;\n\n      return {\n        content: headerContent,\n        isHeader: true,\n        count: 0,\n        complete: false\n      }\n    } else {\n      return {\n        content: line,\n        isHeader: false,\n        count: stepCount++,\n        complete: false\n      }\n    }\n  });\n}\n\nmodule.exports = {\n  parseIngredients,\n  parseInstructions,\n  stripIngredient,\n  getMeasurementsForIngredient,\n  getTitleForIngredient,\n  unitUtils\n}\n"],"names":["root","MAX_CYCLE_LEN","P","createError","name","errorConstructor","temp","Error","apply","arguments","IntermediateInheritor","prototype","DivisionByZero","Fraction","InvalidParameter","assign","n","s","isNaN","parseInt","throwInvalidParam","parse","p1","p2","d","v","w","x","y","z","A","B","C","D","N","M","undefined","Math","pow","floor","log","LN10","NaN","match","length","abs","modpow","b","e","m","r","cycleLen","rem","t","cycleStart","len","rem1","rem2","gcd","a","places","ceil","round","eps","cont","rec","slice","i","tmp","valueOf","excludeWhole","whole","str","res","push","dec","g","cycLen","cycOff","Object","defineProperty","exports","module","fn","Unitz","Classes","addDefaults","Core","addClass","Class","system","System","ANY","common","unit","baseUnit","denominators","units","Plurality","SINGULAR","PLURAL","getGroup","addUnits","unitNames","concat","keys","classMap","map","className","groupMap","fractionMatchers","fractionMatchRegexp","RegExp","matcher","source","join","replaceFractionsInText","rawText","replace","trim","charCodeAt","headerRegexp","multipartQuantifierRegexp","measurementRegexp","quantityRegexp","unitUtils","measurementQuantityRegExp","fillerWordsRegexp","notesRegexp","stripNotes","ingredient","getMeasurementsForIngredient","strippedIngredient","split","ingredientPart","measurementMatch","filter","measurement","getTitleForIngredient","ingredientPartDelimiters","reduce","acc","idx","stripIngredient","trimmed","parseIngredients","ingredients","scale","boldify","lines","content","originalContent","complete","isHeader","line","headerMatches","ingredientParts","measurementMatches","linePart","header","headerContent","substring","find","el","updatedIngredientParts","measurementPartDelimiters","measurementParts","j","scaledMeasurement","fractionjs","mul","indexOf","toFraction","updatedMeasurement","measurementPart","console","error","parseInstructions","instructions","stepCount","instruction","count"],"mappings":"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"}